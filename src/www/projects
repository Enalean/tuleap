<?php
//
// SourceForge: Breaking Down the Barriers to Open Source Development
// Copyright 1999-2000 (c) The SourceForge Crew
// http://sourceforge.net
//
// 

require_once('pre.php');

$default_content_type = 'text/html';

$project       = null;
$expl_pathinfo = explode('/', $request->getFromServer('REQUEST_URI'));
if (isset($expl_pathinfo[2])) {
    $project = ProjectManager::instance()->getProjectFromAutocompleter(urldecode($expl_pathinfo[2]));
}
if ($project && !$project->isError()) {
    $group_id = $project->getId();

    //set up the group_id
    $_REQUEST['group_id'] = $_GET['group_id'] = $group_id;
    $request = HTTPRequest::instance();
    $request->params['group_id'] = $_REQUEST['group_id'];
    
    if(!negotiate_content_project_home($project, $default_content_type)) {
        if ($request->isAjax()) {
            header('Content-type: application/json');
            echo json_encode(
                array(
                    'id'   => $group_id, 
                    'name' => $project->getPublicName(),
                )
            );
            exit;
        }
        // if the summary service is active we display the dashboard of the project
        // otherwise we display the first active service on the list
        
        if ($project->usesService('summary')){
            //now show the project page
            include_once 'project_home.php';
        } else {
            $serv = $project->services;
            $val = array_values($serv);
            foreach ($val as $containedSrv){
               if ($containedSrv->isUsed()) {
                   $service = $containedSrv;
                   break;
               } 
            }
            if ($service->isIFrame()){
                $label = $service->getLabel();
                if ($label == "service_". $service->getShortName() ."_lbl_key") {
                    $label = $Language->getText('project_admin_editservice',$label);
                } elseif(preg_match('/(.*):(.*)/', $label, $matches)) {
                    $label = $Language->getText($matches[1], $matches[2]);
                }
                $title = $label .' - '. $project->getPublicName();
                site_project_header(array('title' => $title, 'group' => $request->get('group_id'), 'toptab' => $service->getId()));
                $GLOBALS['HTML']->iframe($service->getUrl(), array('class' => 'iframe_service'));
                site_project_footer(array());
            } else {
                $GLOBALS['Response']->redirect($service->getUrl());
            }
        }
    }
} else {
    if (!negotiate_content_projects_list($default_content_type)) {
        header("HTTP/1.0 404 Not Found");
        if (!$request->isAjax()) {
            exit_no_group();
        }
    }
}

//
// Following functions were imported from FusionForge (almost) "as is"
// Code should be kept as close as possible (ideally shared).
// 

function negotiate_content_project_home(PFO_Project $project, $default_content_type) {
    $script='project_home';
    $content_type = util_negociate_alternate_content_types($script, $default_content_type);

    // if a custom content-type is selected, then redirect to plugin's rendering
    if($content_type != $default_content_type) {
         $content             = '';
         $accept_content_type = $content_type;
         $content_type        = '';
         $hook_params = array(
            'groupname'    => $project->getUnixName(),
            'accept'       => $accept_content_type,
            'return'       => '',
            'content_type' => &$content_type,
            'group_id'     => $project->getID(),
            'content'      => &$content,
        );
        EventManager::instance()->processEvent('content_negociated_project_home', $hook_params);
        if ($content_type != ''){
            header('Content-type: '. $content_type);
            echo $content;
        } else {
            header('HTTP/1.1 406 Not Acceptable',true,406);
        }
        exit(0);
    }
    return false;
}

function negotiate_content_projects_list($default_content_type) {
    $script = 'projects_list';
    $content_type = util_negociate_alternate_content_types($script, $default_content_type);

    if($content_type != $default_content_type) {
        $content             = '';
        $accept_content_type = $content_type;
        $content_type        = '';
        $hook_params = array(
            'accept'       => $accept_content_type,
            'return'       => '',
            'content_type' => &$content_type,
            'content'      => &$content,
        );
        EventManager::instance()->processEvent('content_negociated_projects_list', $hook_params);
        if ($content_type != ''){
            header('Content-type: '. $content_type);
            echo $content;
        } else {
            header('HTTP/1.1 406 Not Acceptable',true,406);
        }
        exit(0);
    }
    return false;
}

// Local Variables:
// mode: php
// End:
?>
