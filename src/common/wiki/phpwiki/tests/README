$Id$

todo: certain blocks are repeated over and over. For example, editing
a page is always the same set of links to follow, but this info is
duplicated across all test scripts. There should be a way of
abstracting this info. Macros perhaps.

System requirements for the test suite for PhpWik:

Sun's Java SDK, http://java.sun.com/j2se/
httpunit,       http://httpunit.sf.net
Ant,            http://jakarta.apache.org/builds/jakarta-ant/release/
jtidy,          http://sourceforge.net/project/showfiles.php?group_id=13153

(actually httpunit needs jtidy, not this test system per se)
This was tested against Ant version 1.4.1 and httpunit 1.3.

---

(This is just a set of entries from my work log when I was at Capital
Thinking. It was then copy/pasted into their Wiki (they used PyWiki)
as a little tutorial on how to use it. All of the basic information is
here. It was tailor made for their system, so some reworking is still
needed to make it work with PhpWiki; also I didn't quite grok unit
testing as implemented by httpunit at the time. I suppose we'd also be
better off using the PHP version of httpunit as well, though it was
still beta when I last looked at it.

Capital Thinking uses ATG Dynamo on Solaris, so all of our work was in
Java and Perl, in case you were wondering why these were chosen).



How to make a single test
* write the script
* generate the java file
* compile it, run it

How to make a test suite:
* write the script
* run makemakebuild.pl
* run ant


--------------
Short Tutorial

The GuiTester is a small simple system to test the GUI of the BlueWire system.

As a programmer you have to do these steps:

	1. Write a little input script. Let's call it MyTest.inputs.
	2. Create a Java source file with your input script, with a Perl script called maketest.pl. Run this command: '''maketest.pl MyTest.inputs'''. This will create a file called MyTest.java.
	3. Compile your file: '''javac MyTest.java'''
	4. Run your test: '''java MyTest'''

That's the short form for writing your own single test. You can accumulate tests in a single directory, and via the magical tools "make" and Ant, run a whole set of tests.

	1. Write one or more input scripts.
	1. run '''makemakebuild.pl'''. This script gets the names of all .input files in the current directory and generates a Makefile and a build.xml file.
	1. Run ant with no arguments, i.e. just type "ant" and hit return.

That's all. All the Java files will be generated for you, compiled, and ran against BlueWire.


-----------------
A Longer Tutorial

An input script, which follows the naming convention ClassName.inputs,
consists of a set of little statement blocks. Here is a sample which
handles logging in to the system:

 # start script
 # get the starting page
 type: starting_page
 start_url: http://127.0.0.1:8850/jpmorgan/index.jhtml
 go
 
 # log in
 type: fill_and_submit_form
 form_num: 0
 submitbutton_num: 0
 setparam: "/jpmorgan/dbbeans/CTAuthentication.bean.username", "jpmorganuser"
 setparam: "/jpmorgan/dbbeans/CTAuthentication.bean.password", "jpmorganuser"
 assert_url: active_deals
 go
 
 # end script

(If you use Emacs you can get some nice color highlighting with:
M-x font-lock-mode RET
M-x sh-mode RET)

First, each block starts with a type: command and ends with "go":

 type: starting_page
 start_url: http://127.0.0.1:8850/jpmorgan/index.jhtml
 go

This tells the code generator the action we're taking ("type:") is
going to the starting page, and "start_url:" has the URL to go to.

The second block will fill in and submit the form:

 type: fill_and_submit_form
 form_num: 0
 submitbutton_num: 0
 setparam: "/jpmorgan/dbbeans/CTAuthentication.bean.username", "jpmorganuser"
 setparam: "/jpmorgan/dbbeans/CTAuthentication.bean.password", "jpmorganuser"
 assert_url: active_deals
 go

Here form_num is the form number in the page; that is, in
Javascript-land, each form in the page has a number starting at
zero. Likewise all submit buttons have a number (per form) starting at
zero. "setparam" gives the name of the form field and the value for
that field. Later we will see you can use names for the forms and
submit buttons, if available.

Here's a list of the keywords in the little scripting language:

 assert_field:
 assert_text:
 assert_title:
 assert_url:
 follow_image_link:
 follow_link:
 form_name:
 form_num:
 go
 setparam:
 start_url:
 submitbutton_name:
 submitbutton_num:
 type:
 #

-----
'''Comments'''

Each comment has to be at the start of the line; you can introduce comments
with a hash sign (#) at the start of a line:

# I am a comment.

oo-----
'''Types of statement blocks'''

There are only four kinds of statement blocks in GuiTester:

 starting_page
 fill_and_submit_form
 follow_image_link
 follow_link

They are pretty self explanatory. Any script you write will always
start with the '''starting_page''' block. Usually this will be the
index.jhtml of BlueWire and the second statement block will be
'''fill_and_submit_form''' where you will log into the system.

-----
'''Assertions'''

You can do assertions on form fields, titles, URLs and the text of the
page. Assertions always follow the form:

 assert_thing "string" <, "string">

Some assertions take one argument (title, URL, text) and one takes two
(field). Examples:

 assert_field: "fname", "Jackie"
 assert_field: "lname", "Robinson"
 assert_title: "this is the page's title"
 assert_url: "somedealpage.jhtml"

Assertions throw an exception and the test fails if they are not
true. Assertions are always done after a page has been retrieved in a
given statement block... this is a subtle point and you should reread
that if it doesn't make sense. '''assert_url''' will take the string
and try to match it in the URL returned.

-----
'''Following links'''

 follow_image_link:
 follow_link:

These will follow a link by the text in the link, or by the ALT text
if it's an image link (like "Browse Deals").

 follow_image_link: "Browse Deals"
 follow_link: "Get a Quick Quote"

-----
'''Filling in forms'''

 form_name:
 form_num:
 submitbutton_name:
 submitbutton_num:
 setparam:

These tell what form and what submit button to use... these are only
used with '''fill_and_submit_form''' statement blocks. They take
either a name (as shown in the '''name=""''' attribute of the form or
button) or the number. The number is a Javascript/DOM thing; all forms
are numbered by order of appearance starting at 0.

The '''setparam:''' directive will set a form field, and takes two
arguments: the form field name, and the value. Note that you must
always use double quotes for the arguments, separated by a comma:

 setparam: "searchterm", "foo"
 setparam: "num_things", "3"
 setparam: "options_list", "16"



