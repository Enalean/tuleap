<?php
/* 
 * Copyright 2005, STMicroelectronics
 *
 * Originally written by Manuel Vacelet
 *
 * This file is a part of CodeX.
 *
 * CodeX is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * CodeX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CodeX; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

require_once('RecordIterator.class');

/**
 *
 *<pre>
 * `id` INT( 11 ) NOT NULL AUTO_INCREMENT ,
 * `attachment_id` INT( 11 ) NOT NULL ,
 * `user_id` INT( 11 ) NOT NULL ,
 * `date` INT( 11 ) NOT NULL ,
 * `revision` INT( 11 ) NOT NULL ,
 * `mimetype` VARCHAR( 255 ) NOT NULL ,
 * `size` INT( 11 ) NOT NULL
 * PRIMARY KEY ( `id` )
 *</pre>
 *
 *
 * @see       WikiAttachment
 * @see       WikiAttachmentRevisionIterator
 * @package   WikiService
 * @copyright STMicroelectronics, 2005
 * @author    Manuel Vacelet <manuel.vacelet-abecedaire@st.com>
 * @license   http://opensource.org/licenses/gpl-license.php GPL
 */
class WikiAttachmentRevision {
    var $id;
    var $attachmentId;
    var $owner_id;

    var $date;
    var $revision;
    var $mimeType;
    var $size;


    var $file;
    var $gid;
    var $basedir;


    /**
     *
     */
    function WikiAttachmentRevision($gid=null) {
        if(is_numeric($gid)) {
            $this->gid = $gid;
            $this->basedir = ATTACHMENT_DATA_DIR.'/'.$this->gid;
        }
    }

    function dbFetch() {
        $sql = 'SELECT * FROM wiki_attachment_revision'
            .'    WHERE attachment_id="'.$this->attachmentId.'"'
            .'    AND revision="'.$this->revision.'"';
        $res = db_query($sql);

        if(db_numrows($res) > 1) {
            trigger_error("There are multiple identifier for an attachment."
                          ."Please contact an administrator", E_USER_ERROR);
            return false;
        }
        else {
            $this->setFromRow(mysql_fetch_array($res));    
        }
    }
  
    function create($userfile_tmpname) {
        $this->getFilename();
        $file_dir = $this->basedir.'/'.$this->filename;
    
        /** @todo: add lock */

        $waIter = new WikiAttachmentRevisionIterator($this->attachmentId);
        $waIter->getList();
        $this->revision = $waIter->count();

        if(!move_uploaded_file($userfile_tmpname, $file_dir.'/'.$this->revision)) {		
            trigger_error( "Uploading faild: ".$this->filename, E_USER_ERROR);
            return false;
        }

        chmod($file_dir.'/'.$this->revision, 0600);

        $ret = $this->dbadd();

        /** @todo: add unlock */
    
        return $ret;
    }
  
    function dbadd() {
        $sql = 'INSERT INTO wiki_attachment_revision SET'
            .'  attachment_id="'.$this->attachmentId.'"'
            .', user_id="'.$this->owner_id.'"'
            .', date="'.$this->date.'"'
            .', revision="'.$this->revision.'"'
            .', mimetype="'.mysql_real_escape_string($this->mimeType).'"'
            .', size="'.$this->size.'"';

        $res = db_query($sql);

        if(db_affected_rows($res) === 1)
            return true;

        trigger_error('Can not insert new attachment revision: "'.db_error(), E_USER_ERROR);
        return false;
    }


    /**
     *
     */
    function htmlDump() {
        if($this->exist()){
            header('Content-type: '.$this->getMimeType());
            header('Content-Length: '.$this->getSize());
            header('Content-Disposition: filename="'.$this->getFilename().'"');
      
            $this->getContent();
        }
    }

    /**
     *
     */
    function getContent() {
        $this->getFilename();

        print file_get_contents($this->basedir.'/'.$this->filename.'/'.$this->revision);
    }


    function exist() {
        $this->getFilename();

        return is_file($this->basedir.'/'.$this->filename.'/'.$this->revision);
    }


    function log($userId) {
        $_userId = (int) $userId;

        $qry = 'INSERT INTO wiki_attachment_log'
            .' (user_id, group_id, wiki_attachment_id, wiki_attachment_revision_id, time)'
            .' VALUES('.$_userId
            .', '.$this->gid
            .', '.$this->attachmentId
            .', '.$this->id
            .', '.time().')';
            
        db_query($qry);
        
    }


    function setFromRow($row) {
        $this->id           = $row['id'];      
        $this->attachmentId = $row['attachment_id'];      
        $this->owner_id     = $row['user_id'];	
        $this->date         = $row['date'];      
        $this->revision     = $row['revision'];      
        $this->mimeType     = $row['mimetype'];      
        $this->size         = $row['size'];
    }

    /**
     *
     */
    function setFilename($name="") {   
        $this->filename = $name;
        return true;
    }


    /**
     *
     */
    function setSize($s) {
        global $sys_max_size_upload;

        if ($s> $sys_max_size_upload) {
            trigger_error("Sorry but this file is too big", E_USER_ERROR);
            return false;
        }

        $this->size = (int) $s;
        return true;
    }


    /**
     *
     */
    function setMimeType($m) {
        $this->mimeType =  $m;
        return true;
    }
  
    function setOwnerId($uid) {
        $this->owner_id = (int) $uid;
        return true;
    }

    function setAttachmentId($aid) {
        $this->attachmentId = (int) $aid;
        return true;
    }

    function setDate($date) {
        $this->date = (int) $date;
        return true;
    }

    function setRevision($rev) {
        $this->revision = (int) $rev;
        return true;
    }

    /**
     *
     */
    function getRevision() {    
        return $this->revision;
    }

    /**
     *
     */
    function getFilename() {
        if(empty($this->filename)) {
            if(is_numeric($this->attachmentId)) {
                $sql = 'SELECT name FROM wiki_attachment'
                    .'    WHERE id="'.$this->attachmentId.'"';
                $res = db_query($sql);
                $row = db_fetch_array($res);
                $this->filename = $row['name'];
            }
        }
        return $this->filename;
    }


    function getOwnerId() {
        return $this->owner_id;
    }

    /**
     *
     */
    function getFilepath() {
        return $this->file;
    }


    /**
     *
     */
    function getSize() {    
        return $this->size;
    }


    /**
     *
     */
    function getMimeType() {
        return $this->mimeType;
    }


    /**
     *
     */
    function getDate() {
        return $this->date;
    }
}


/**
 * Iteratator for file revisions
 *
 * This class helps for WikiAttachment and WikiAttachement_Revision handeling
 * It offers classical function to walk into WikiAttachement_Revision and to
 * compute interesting values.
 *
 * @see       WikiAttachment
 * @see       WikiAttachmentRevision
 * @package   WikiService
 * @copyright STMicroelectronics, 2005
 * @author    Manuel Vacelet <manuel.vacelet-abecedaire@st.com>
 * @license   http://opensource.org/licenses/gpl-license.php GPL
 */
class WikiAttachmentRevisionIterator extends RecordIterator {
    /**
     * attachment id
     * @var int
     */
    var $id;
  
    /**
     * @access public
     * @param  $file string File to iterate
     */
    function WikiAttachmentRevisionIterator($id) {
        $this->id = (int) $id;   
        parent::RecordIterator('WikiAttachmentRevision');
    }


    function getList() {
        $this->sqlStatement = 
            '  SELECT * FROM wiki_attachment_revision'
            .' WHERE attachment_id="'.$this->id.'"'
            .' ORDER BY date DESC';
        $this->dbinit();
    }
}

?>