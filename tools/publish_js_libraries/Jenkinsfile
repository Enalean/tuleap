#!/usr/bin/env groovy

def actions

pipeline {
    agent {
        label 'docker-rpm'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare') {
            steps {
                script { actions = load 'sources/tests/actions.groovy' }
                dir ('sources') {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'nexus.enalean.com_readonly',
                            passwordVariable: 'NPM_PASSWORD',
                            usernameVariable: 'NPM_USER'
                        ),
                        string(credentialsId: 'github-token-composer', variable: 'COMPOSER_GITHUB_AUTH')
                    ]) {
                        script { actions.prepareSources('dev') }
                    }
                }
            }
        }

        stage('Check lockfiles') {
            steps { script {
                actions = load 'sources/tests/actions.groovy'
                actions.runFilesStatusChangesDetection('.', 'lockfiles', 'composer.lock')
            } }
            post {
                failure {
                    dir ('sources') {
                        sh 'git diff'
                    }
                }
            }
        }

        stage('Tests') {
            failFast false
            parallel {
                stage('Translations: check .po files') {
                    steps { script {
                        actions.runFilesStatusChangesDetection('.', 'translation files', '"*.po\$"')
                    } }
                }
                stage('ESLint static analysis') {
                    steps { script { actions.runESLint() } }
                }
                stage ('Treefmt linter/formatter') {
                    steps { script { execTestWithLimitedConcurrency({ actions.runTreefmt() }) } }
                }
                stage ('JS Unit tests') {
                    steps { script { actions.runJSUnitTests() } }
                    post { always { junit 'results/js-test-results/junit-*.xml' } }
                }
            }
        }

        stage('Publish') {
            steps {
                dir ('sources') {
                    withCredentials([string(credentialsId: 'NPM_TOKEN', variable: 'NPM_TOKEN')]) {
                        script { actions.runInsideNixShell(
                            'pnpm config set "//registry.npmjs.org/:_authToken" "${NPM_TOKEN}" && pnpm publish --access public --filter "@tuleap/*" --no-git-checks'
                        ) }
                    }
                }
            }
        }
    }
}
