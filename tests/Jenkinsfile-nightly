#!/usr/bin/env groovy

def actions

pipeline {
    agent {
        label 'docker'
    }
    triggers { cron('H 5 * * 1-5') }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Prepare') {
            steps {
                dir ('results') {
                    deleteDir()
                }
                script { actions = load 'sources/tests/actions.groovy' }
                dir ('sources') {
                    withCredentials([
                        usernamePassword(
                            credentialsId: 'nexus.enalean.com_readonly',
                            passwordVariable: 'NPM_PASSWORD',
                            usernameVariable: 'NPM_USER'
                        ),
                        string(credentialsId: 'github-token-composer', variable: 'COMPOSER_GITHUB_AUTH')
                    ]) {
                        script { actions.prepareSources('dev') }
                    }
                }
            }
        }

        stage('Unit tests PHP') {
            steps { script { actions.runPHPUnitTests('84', false) } }
            post { always { junit 'results/ut-phpunit/*/phpunit_tests_results.xml' } }
        }

        stage ('Unit tests JS/TS with coverage') {
            steps { script { actions.runJSUnitTests(true) } }
            post {
                always {
                    junit 'results/js-test-results/junit-*.xml'
                }
            }
        }

        stage('E2E tests') {
            options { retry(1) }
            steps {
                script { actions.runEndToEndTests('full', 'mysql80') }
            }
            post {
                always {
                    junit 'results/e2e/full/*.xml'
                }
            }
        }
        stage ('MySQL 8.4') {
            failFast false
            parallel {
                stage('DB/Integration') {
                    steps { script { actions.runDBTests('mysql84', '84') } }
                    post { always { junit 'results/db/*/db_tests.xml' } }
                }
                stage('REST') {
                    steps { script { actions.runRESTTests('mysql84', '84') } }
                    post { always { junit 'results/api-rest/*/*' } }
                }
            }
        }

        stage('Build and run el10') { steps { script { actions.runBuildAndRun('el10') } } }
    }
    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: 'results/'
        }
        failure {
            withCredentials([string(credentialsId: 'email-notification-rd-team', variable: 'email')]) {
                mail to: email,
                subject: "${currentBuild.fullDisplayName} is broken",
                body: "See ${env.BUILD_URL}"
            }
        }
        unstable {
            withCredentials([string(credentialsId: 'email-notification-rd-team', variable: 'email')]) {
                mail to: email,
                subject: "${currentBuild.fullDisplayName} is unstable",
                body: "See ${env.BUILD_URL}"
            }
        }
    }
}
