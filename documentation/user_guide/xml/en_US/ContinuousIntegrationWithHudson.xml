<!--
// Copyright (c) Xerox Corporation, Codendi 2007-2008.
// This file is licensed under the GNU General Public License version 2. See the file COPYING. 
-->
<chapter id="ContinuousIntegrationWithHudson">
  <title>Continuous Integration with Hudson/Jenkins</title>
  
  <section id="ContinuousIntegrationIntroduction">
    <title>Introduction to Continuous Integration</title>
    
    <para>
        Continuous Integration is the given name for the good practices used 
        in software engineering. These good practices aim at checking that a 
        source code modification does not lead to a regression on the developping 
        software application. This checking is usually performed on a different 
        machine than your development one (this machine is called an integration
        server); and this checking is carried out rather frequently
        <footnote>
         <para>
            Several strategies are possible: after each commit, with regular
            interval (every hours, every night). It depends on the size of the 
            project, the number of developers, the frequency of modifications.
         </para>
        </footnote>,
        and so it's called Continuous Integration.
    </para>
    <para>
        The tool responsible for this checking is a Continuous Integration tool
        such as CruiseControl or Hudson/Jenkins.
        This checking is called a <emphasis role="bold">Build</emphasis>.
        A build will correspond, according to your project, in a succession of
        steps, such as:
        <itemizedlist mark="bullet">
         <listitem><para>Compilation,</para></listitem>
         <listitem><para>Documentation generation (javadoc for instance),</para></listitem>
         <listitem><para>Unit tests execution,</para></listitem>
         <listitem><para>Quality analysis on source code (coding conventions, number of comments, code metrics, etc.),</para></listitem>
         <listitem><para>Delivery generation (exe, zip, tar, etc.).</para></listitem>
        </itemizedlist>
        The continuous integration tool does not perform the build itself, but just
        launch it with regular interval, display the result of the build, and is
        able of sending notification to project members if a modification involved
        any regression.
    </para>
    <para>
        This development method, initiated at the beginning by the Extreme Programming
        community and adopted by Agiles methods, brings adding value to your 
        development process. For instance:
        <itemizedlist mark="bullet">
         <listitem><para>Tests are immediatly executed after each modification (step sometimes neglected by developers),</para></listitem>
         <listitem><para>Integration issues are continuously detected, to be fixed as soon as possible,</para></listitem>
         <listitem><para>It always exists an operational version of deliveries available for tests, demo or distribution.</para></listitem>
        </itemizedlist>
    </para>
    
    <para>
        The continuous integration tool we decided to integrate in &SYS_PRODUCT_NAME; 
        is <emphasis role="bold">Hudson/Jenkins</emphasis>, which is one of the best tool. Jenkins is a fork of Hudson. So in this chapter we will use the name Hudson. It stands both for Hudson and Jenkins.
		Hudson configuration can be easily done on the web interface,
        and there is a contextual help for each step of the configuration, which
        is really appreciable.
    </para>
    
    <para>
      The lexicon of Continuous integration and Hudson is quite specific.
      Let's then give a definition:
      <table frame="all">
       <title>Glossary of Hudson and continuous integration specific words</title>
       <tgroup cols="2">
       <colspec colname="c1" colwidth="100pt" />
       <colspec colname="c2" colwidth="350pt"  />
       <thead>
        <row>
         <entry>Word</entry>
         <entry>Definition</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry><emphasis role="bold">Job</emphasis></entry>
         <entry>The concept of Job can be associated with the concept of project.
         The job will trigger the build, but it's also in charge of setting the 
         building environment required for executing the build (updating the
         source code for instance). It will also be able to execute the build,
         and then perform some tasks such as publishing generated documentation,
         publishing test results, sending notifications, etc.)</entry>
        </row>
        <row>
         <entry><emphasis role="bold">Build</emphasis></entry>
         <entry>Process is made of several steps executed periodically on a
         continuous integration server.</entry>
        </row>
        <row>
         <entry><emphasis role="bold">Artifact</emphasis></entry>
         <entry>Item are generated during the build, and are published by the continuous
         integration tool. The continuous integration notion of artifact is 
         obviously different than the notion of a &SYS_PRODUCT_NAME; artifact
         (which is an item tracked in a tracker).</entry>
        </row>
        <row>
         <entry><emphasis role="bold">Workspace</emphasis></entry>
         <entry>Directory where the project will be deployed in order to perform
         the build, and enventually publish artifacts.</entry>
        </row>
        <row>
         <entry><emphasis role="bold">Status (of the build)</emphasis></entry>
         <entry>Build status can take several values regarding the tool.
         Hudson has 4 status:
          <itemizedlist mark="bullet">
           <listitem><para>Successfull : everything went fine, all tests were successfull,</para></listitem>
           <listitem><para>Unstable : the build was successfull but unstable (failed tests for instance),</para></listitem>
           <listitem><para>Failed : the build fatally failed</para></listitem>
           <listitem><para>Disabled : the project has never been built before, or the project is disabled.</para></listitem>
          </itemizedlist>
         </entry>
        </row>
        <row>
         <entry><emphasis role="bold">Trend (of the builds)</emphasis></entry>
         <entry>Trend based on the latest 5 builds.
         This trend is represented by a weather report (sun, thunder, etc.) meaning
         that the trend is good or not.</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    
  </section>
  
  <section id="HudsonInstallation">
    <title>Hudson Installation</title>
    <para>
        A JVM (1.5 or higher) is required for Hudson installation.
        Hudson can be run standalone, but we will describe the installation in
        a container, such as Tomcat.
        <procedure>
         <title>Here are the steps:</title>
          <step><para>Install Tomcat</para></step>
          <step><para>Download the Hudson war file (hudson.war) at <ulink url="https://hudson.dev.java.net/">https://hudson.dev.java.net/</ulink></para></step>
          <step><para>Set the environment variable HOME_HUDSON if you want to define the install folder of Hudson</para></step>
          <step><para>Deploy the war file in Tomcat manager.</para></step>
        </procedure>
        You're done! Hudson is installed. By default, you can access the interface at <ulink url="http://localhost:8080/hudson">http://localhost:8080/hudson</ulink>
      </para>
    
  </section>
  
  <section id="HudsonConfiguration">
    <title>Hudson Configuration</title>
    <para>
        Before creating your own jobs, (see <xref linkend="JobCreationAndConfiguration" />),
        you need to configure Hudson. All these steps are optional, you only have
        to configure what you really need.
    </para>
    
    <section id="HudsonSystemConfiguration">
      <title>System Configuration</title>
      <para>
        To configure Hudson, select the link "Manage Hudson" in the top menu in
        Hudson interface, and then the link "Configure System".
      </para>
      <para>
        All these steps have an online contextual help. Don't be afraid to
        use it. To do it, you only have to select the question mark corresponding
        to the option needed.
      </para>
        
      <section id="HudsonSystemConfigurationToolpath">
        <title>External Tools</title>
        <para>
            In order to be able to execute builds of your projects, Hudson needs
            to know the path to the tools required to.
        </para>
        <para>
            You can specify here the path to the external tools you need.
            By default, the available tools are JDK, Shell, Ant, Maven and CVS.
            If you install some plug-ins (see <xref linkend="HudsonPluginsConfiguration" />)
            that need external tools, you will be able to configure them in this section.
            <figure id="HudsonExternalToolsConfiguration">
              <title>External Tools Configuration</title>
              <mediaobject>
                <imageobject>
                  <imagedata format="PNG"
                    fileref="../../screenshots/en_US/sc_hudsonexternaltoolsconfiguration.png" width="14.5cm" />
                </imageobject>
              </mediaobject>
            </figure>
            You can define several instances of the same tool (several version of
            JDK for instance).
        </para>
      </section>
      
      <section id="HudsonSystemConfigurationAuthentication">
        <title>Authentication</title>
        <para>
            By default, everyone can browse Hudson, browse the jobs, see the 
            builds results and schedule builds on the web interface.
        </para>
        <para>
            You can nevertheless restrict the permissions. To do that, yo need
            to check the box "Enable security" (still in the menu
            "Manage Hudson" -> "Configure System").
            You have several options:
            <itemizedlist mark="bullet">
             <listitem>
              <para>
                <emphasis role="bold">Delegate to servlet container:</emphasis>
                in our case, it means Tomcat. The Tomcat configuration file 
                for user definition and permissions is
                <emphasis>&lt;tomcat&gt;/conf/tomcat-users.xml</emphasis>. 
                See container documentation for more details.
              </para>
             </listitem>
             <listitem>
              <para>
                <emphasis role="bold">LDAP:</emphasis> if you already have a
                LDAP directory, you only need to specify the address of the server,
                and Hudson will recognize the users.
              </para>
             </listitem>
             <listitem>
              <para>
                <emphasis role="bold">Hudson's own user database:</emphasis>
                Hudson can manage its own user database. In this case, you have to
                create yourself the users, or allow them to register.
              </para>
             </listitem>
            </itemizedlist>
            The choice of enabling security or not will depend on your company
            internal rules, or the specificity of your projects or the size
            of the teams.
        </para>
      </section>
      
      <section id="HudsonSystemConfigurationEmailNotification">
        <title>Email Notification</title>
        <para>
            Hudson is able to send notification to warn about build result.
            You can of course configure this for each job.
            To enable notification, you need to state a mail server (SMTP server).
            Leave the field empty if you want to use the default mail server (localhost).
        </para>
        <para>
            You can also define a default user email suffix. By default, all of the
            &SYS_PRODUCT_NAME; users have an email address of the form
            <emphasis role="bold">login@&SYS_DEFAULT_DOMAIN;</emphasis> that is
            mapped to the real email address. You can then fill this field with
            the value <emphasis role="bold">@&SYS_DEFAULT_DOMAIN;</emphasis> and
            the emails will be automatically sent to the right users.
        </para>
        <para>
            You can also specify the system Admin Email Address.
            Notification e-mails from Hudson to project owners will be sent with 
            this address in the from header.
        </para>
        <para>
            You finally need to state the URL of the Hudson server. URL in sent 
            emails will then be correct.
        </para>
      </section>
      
      <section id="HudsonSystemConfigurationJabberNotification">
        <title>Jabber Notification</title>
        <para>
            If you have installed the Jabber plug-in for Hudson
            (see <xref linkend="HudsonPluginsConfiguration" />), you will find
            in the section "Manage Hudson" -> "Configure System"
            a part to configure Jabber notification.
            If the Jabber plugin for &SYS_PRODUCT_NAME; is installed and enabled,
            every &SYS_PRODUCT_NAME; user has a Jabber account (see <xref linkend="IMPlugin" />)
            and each project has a Chat Room. Jabber plug-in lets you the ability
            to send notification to users or chat rooms.
        </para>
        <para>
            To use the Jabber notification, please give the name of the server
            (by default &SYS_DEFAULT_DOMAIN;) as well as the JabberID of the 
            user that will send the notifications.
        </para>
      </section>
    
    </section>
    
    
    <section id="HudsonPluginsConfiguration">
      <title>Hudson Plug-ins</title>
      <para>
        Lots of plug-ins are available to extend Hudson. Among them, we can quote:
        checkstyle, CI game, Crap4J, LDAP Email, MSBuild, NAnt,
        NUnit, Selenium, etc. You will find a detailed list of all these plug-ins
        at <ulink url="http://hudson.gotdns.com/wiki/display/HUDSON/Plugins">http://hudson.gotdns.com/wiki/display/HUDSON/Plugins</ulink>
      </para>
      <para>
        The list of available plug-ins is also available in the menu 
        "Manage Hudson" -> "Manage plugins". The list is dynamicaly updated.
        If your continuous integration server is behind a proxy, you will need
        to configure it in the "Advanced" tab.
      </para>
      <para>
        To install a plug-in, check the box in front of the wished plug-in,
        press the Install button and then follow the instructions.
      </para>
    </section>
    
  </section>
  
  <section id="JobCreationAndConfiguration">
    <title>Hudson Jobs Creation and Configuration</title>
    <para>
        Once the system is configured, you can start defining your jobs.
        To do that, select the link "New job" in the menu on top left.
        You just have to give a name (the name of your project for instance)
        and choose the type.
        Several types of jobs are possible. The most common is "free style 
        software project" that we are using as an example in this documentation.
        There is also a type "Maven2" if you already use this build tool.
    </para>
    <para>
        Select the Ok button to confirm the job creation. The next screen is then
        the job configuration screen. You can add a description if you want.
        Then, you will be able to specify the source code repository, and the
        way that Hudson will handle the source code updates, define the steps
        of the build, and tell Hudson what to do after the build.
    </para>
    
    <section id="JobConfigurationSVNCVS">
      <title>CVS and Subversion</title>
      <para>
        By default, Hudson suggests the same two SCM (Source Code Management) as
        &SYS_PRODUCT_NAME;: CVS and Subversion. Select the manager you're using
        for your project, and then enter the information about the paths to your
        project's repository.
      </para>
      <section id="JobConfigurationCVS">
       <title>CVS</title>
          <para>
            To configure CVS, you need to give the CVSROOT of your project.
            The expecting format is <emphasis role="bold">:protocol:user@host:path</emphasis>
          </para>
          <para>
            You can find the details of the expecting string selecting the CVS tab of
            your project in &SYS_PRODUCT_NAME;. It looks like 
            <emphasis role="bold">:pserver:[username]@[projectname].&SYS_DEFAULT_DOMAIN;:/cvsroot/[projectname]</emphasis>
          </para>
          <para>
            You can also provide one or several modules and/or a branch.
          </para>
      </section>
      <section id="JobConfigurationSVN">
       <title>Subversion</title>
          <para>
            To configure Subversion, you need to provide the URL of the repository.
            This piece of information is available on the &SYS_PRODUCT_NAME; interface,
            by selecting the SVN tab of your project. It looks like
            <emphasis role="bold">http://&SYS_DEFAULT_DOMAIN;/svnroot/[projectname]</emphasis>
          </para>
          <para>
            Hudson will then ask you to give credentials for Subversion, to be able to 
            access the repository. You can then choose several options for managing
            this authentication (either give your login/password or use SSH public
            key authentication or HTTPS client certificate). We let you choosing 
            what option better fits your needs.
          </para>
          <para>
            You can add several repositories by pressing the button "Add more locations...".
          </para>
          <para>
            Finally, if you want to give the ability to the users to navigate
            in the source code repository through Hudson interface, you can
            select "ViewSVN" in the field "Repository browser", and then enter
            the folowing string:
            <emphasis role="bold">http://&SYS_DEFAULT_DOMAIN;/svn/viewvc.php?roottype=svn&amp;root=[your_projet_short_name]</emphasis>
          </para>
      </section>
    </section>
    
    <section id="JobConfigurationBuildTrigger">
      <title>Builds Schedule</title>
      <para>
        As explained in introduction, the big thing with continuous integration
        is the fact that once configured, the build is continuously done, and you
        don't have to think about it. However, we still need to configure the way hudson
        will schedule the build. Two main options are available:
        <itemizedlist mark="bullet">
         <listitem>
          <para><emphasis role="bold">Poll SCM</emphasis>:
          will poll changes in your project SCM (CVS or Subversion).
          You can define the frequency following the cron syntax (see Hudson 
          inline help). This option can however be expensive operations for the
          &SYS_PRODUCT_NAME; server. You can think of using the 'push' option to
          avoid this problem (see below).
          </para>
         </listitem>
         <listitem>
          <para><emphasis role="bold">Trigger builds remotely</emphasis>:
          this 'push' option avoids server overloading. The build is triggered by
          an URL. To avoid anybody to trigger builds, you can protect the operation
          by specifying an authentication token. To really enable the build trigger
          after each commit, you will need to configure it in &SYS_PRODUCT_NAME;,
          in the 'Build' tab of your project (See <xref linkend="HudsonServiceAddJob" />). 
          You will be able to specify your token if you have defined one.
          </para>
         </listitem>
        </itemizedlist>
      </para>
    </section>
    
    <section id="JobConfigurationBuildSteps">
      <title>Build configuration (steps)</title>
      <para>
        You now need to define what the build will effectively do (compile your project,
        generate documentation, launch unit tests, etc.). To do that, you can add
        as many steps as needed. By default (meaning without any other plug-ins),
        Hudson offers 4 types of possible steps:
        <itemizedlist mark="bullet">
         <listitem>
          <para><emphasis role="bold">Execute shell</emphasis>: 
          let you simply enter a shell script in the text area.
          You can use several environment variables (see inline help).
          </para>
         </listitem>
         <listitem>
          <para><emphasis role="bold">Execute Windows batch command</emphasis>:
          let you simply enter a Windows batch script in the text area.
          You can use several environment variables (see inline help).
          </para>
         </listitem>
         <listitem>
          <para><emphasis role="bold">Invoke Ant</emphasis>:
          let you invoke an Ant script. If several Ant version are available
          (see <xref linkend="HudsonSystemConfigurationToolpath" />), you can
          choose the one you want. You can also precise the Ant target if needed.
          Pressing the "Advanced" button, you will be able to specify properties and
          Java options.
          </para>
         </listitem>
         <listitem>
          <para><emphasis role="bold">Invoke top-level Maven targets</emphasis>:
          let you invoke Maven targets. You can specify the expected targets.
          The "Advanced" button lets you define POM file, properties and Java 
          options.
          </para>
         </listitem>
        </itemizedlist>
      </para>
      The step configuration is specific to your project. We will let you
      configure it as needed.
    </section>
    
    <section id="JobConfigurationAfterBuild">
      <title>Post-build Actions</title>
      <para>
        After a build, Hudson can do some actions. Among them:
        <itemizedlist mark="bullet">
         <listitem>
          <para><emphasis role="bold">Archive the artefacts</emphasis>: 
          if your build produces deliveries (such as exe, zip, or tar), or
          generate user documentation for instance, you can publish these
          artifacts on the Hudson build page of your job.
          You need then to specify the path to the artifacts to publish
          (the reference directory is the workspace of your project).
          You can use the wildcard (*) to state artifacts to publish.
          You can also decide to keep the history of artifacts, or just
          the latest successfully generated ones to save space.
          </para>
         </listitem>
         <listitem>
          <para><emphasis role="bold">Publish Javadoc</emphasis>:
          if your build produces javadoc, you can publish it on the build page
          by giving the path to the root folder of the generated javadoc.
          The reference folder is the workspace. You can also use the wildcard, and
          can choose either archive old versions of the javadoc or not.
          </para>
         </listitem>
         <listitem>
          <para><emphasis role="bold">Publish JUnit test result report</emphasis>:
          if your build executes JUnit tests, you can publish a result report on
          the build page in specifying the path of the JUnit generated XML 
          report files. If you use another test plug-in, you will find nearly 
          the same.
          </para>
         </listitem>
         <listitem>
          <para><emphasis role="bold">Build other projects</emphasis>:
          Your job can depend on another one. In this case, you maybe want to
          build another project after the current build. If so, just indicate
          the name of the job to build after this build. You can specify if the
          job has to be built even if the current build failed or not.
          </para>
         </listitem>
         <listitem>
          <para><emphasis role="bold">Email notification</emphasis>:
          Hudson is able to send emails while some events happen.
          You can enter a list of email addresses to be notified. A good practice
          could be giving a mailing list address (specific for Hudson or not) in 
          order to notify all the team (see <xref linkend="MailingListsCreation" />
          to know how to create mailing lists). 
          Events that trigger notification are managed as followed:
              <itemizedlist mark="bullet">
               <listitem>
                <para>Every failed build triggers a new e-mail.</para>
               </listitem>
               <listitem>
                <para>A successful build after a failed (or unstable) build 
                triggers a new e-mail, indicating that a crisis is over.</para>
               </listitem>
               <listitem>
                <para>An unstable build after a successful build triggers a new 
                e-mail, indicating that there's a regression.</para>
               </listitem>
               <listitem>
                <para>Unless configured, every unstable build triggers a new 
                e-mail, indicating that regression is still there.</para>
               </listitem>
              </itemizedlist>
          For lazy projects where unstable builds are the norm, 
          Uncheck "Send e-mail for every unstable build".
          </para>
          <para>
          You can also send a separate email to people who broke the build.
          To do this, the continuous integration server must be well configured
          (see <xref linkend="HudsonSystemConfigurationEmailNotification" />).
          </para>
         </listitem>
        </itemizedlist>
      </para>
    </section>
    
  </section>
  
  
  <section id="HudsonIntegration">
    <title>Integration in &SYS_PRODUCT_NAME;</title>
    <para>
        As continuous integration is a good practice in software engineering,
        &SYS_PRODUCT_NAME; integrates Hudson tool.
        We know how to install (see <xref linkend="HudsonInstallation" />) 
        and configure (see <xref linkend="HudsonConfiguration" />) Hudson, 
        and how to create and configure Hudson jobs
        (see <xref linkend="JobCreationAndConfiguration" />).
        Let's see now how Hudson is integrated to &SYS_PRODUCT_NAME;.
    </para>
    
    <section id="HudsonService">
      <title>Hudson Service</title>
      <para>
        If Hudson plugin is installed and enabled on your &SYS_PRODUCT_NAME; server,
        each project can enable the Hudson service (see <xref linkend="ServiceConfiguration" /> 
        to know how to enable services for your project).
      </para>
      <para>
        Once the service is enabled, you will see a "Build" tab in the service bar
        of your project : the Hudson continuous integration tab.
      </para>
      
      <section id="HudsonServiceAddJob">
        <title>Link Hudson job with your &SYS_PRODUCT_NAME; project</title>
        <para>
            In order to link Hudson job with your project, select the Build tab
            of your project, and then select the 'Add a job' link.
            You need then to give the URL of the Hudson job you want to associate
            with your project (for instance: http://[my_ci_server]:8080/hudson/job/[my_job]).
            <figure id="HudsonAddJob">
              <title>Link Hudon job with your project</title>
              <mediaobject>
                <imageobject>
                  <imagedata format="PNG"
                    fileref="../../screenshots/en_US/sc_hudsonaddjob.png" width="14.5cm" />
                </imageobject>
              </mediaobject>
            </figure>
        </para>
        <para>
            You may also want to enable the auto trigger of the build for this
            job after each commit in your project repository (CVS or Subversion).
            If you have protected your build with a token, you can specify this 
            token (see <xref linkend="JobConfigurationBuildTrigger" /> for more
            information). By checking this option, each commit will trigger a
            build of the associated job, using the pre-commit hook (you don't
            have anything more to do).
        </para>
        <para>
            By the way, it is possible to link several Hudson jobs with one 
            &SYS_PRODUCT_NAME; project.
        </para>
      </section>
      
      <section id="HudsonServiceBrowseJob">
        <title>Browse Hudson jobs and builds</title>
        <para>
            When you select the Build tab of your project, you can see a table
            with all the jobs associated with your project.
            <figure id="HudsonBrowseJobs">
              <title>Hudson jobs associated with your project</title>
              <mediaobject>
                <imageobject>
                  <imagedata format="PNG"
                    fileref="../../screenshots/en_US/sc_hudsonbrowsejobs.png" width="14.5cm" />
                </imageobject>
              </mediaobject>
            </figure>
            For every job, you can see the current status (colored bullet left to 
            the name of the job), the name, the last successfull build, the last
            failed build, if you have enabled SCM trigger or not 
            (see <xref linkend="HudsonServiceAddJob" />). Project admins will 
            also see for each job some icons that let them modify the job or
            delete it (remove the link with &SYS_PRODUCT_NAME;).
        </para>
        <para>
            The name of the job is automatically detected during job creation.
            But you can change it if needed. This is pretty convenient if you want
            to make references to Hudson items (see <xref linkend="HudsonJobReferences" />).
            Spaces in the name of jobs are not allowed. They are replaced by (_),
            in order to allow references.
        </para>
        <para>
            The name of the job and the latest builds are hypertext links that
            will be opened the corresponding Hudson section in a frame below
            the table. This is really convenient to browse Hudson interface 
            while staying in the &SYS_PRODUCT_NAME; interface.
            If you want to open the Hudson frame in a specific window, just select
            the 'show only this frame' link.
        </para>
        <para>
            The table provides also links to Hudson jobs RSS feed.
        </para>
      </section>
      
    </section>
    
    <section id="HudsonWidgets">
      <title>Hudson Widgets</title>
      <para>
        Hudson service lets you adorn your personal and project dashboard with 
        many widgets.
        To know how to add widgets to your personal dashboard, see
        <xref linkend="LoginAndPersonalPage" />. The procedure is similar
        to add widgets to dashboard project (see <xref linkend="ProjectSummaryPageContent" />).
      </para>
      <itemizedlist mark="bullet">
        <listitem>
         <para>
          <emphasis role="bold">My Hudson jobs</emphasis>:
          only available on the personal dashboard.
          By default, it gives an overview of all the jobs of all the projects
          you are member of. You can of course select the jobs you wish to display
          by selecting the preferences link of the widget.
           <figure id="HudsonWidgetMyJobs">
            <title>"My Hudson Jobs" Widget</title>
            <mediaobject>
             <imageobject>
               <imagedata format="PNG"
                 fileref="../../screenshots/en_US/sc_hudson_widget_my_jobs.png" width="14.5cm" />
             </imageobject>
            </mediaobject>
           </figure>
         </para>
        </listitem>
        <listitem>
         <para>
          <emphasis role="bold">Jobs Overview</emphasis>:
          this widget is only available on project dashboard.
          It can display an overview of all the jobs associated with this project.
          You can always choose the ones you want to display in the widget (preferences link).
           <figure id="HudsonWidgetJobsOverview">
            <title>"Jobs Overview" Widget</title>
            <mediaobject>
             <imageobject>
               <imagedata format="PNG"
                 fileref="../../screenshots/en_US/sc_hudson_widget_jobs_overview.png" width="14.5cm" />
             </imageobject>
            </mediaobject>
           </figure>
         </para>
        </listitem>
        <listitem>
         <para>
          <emphasis role="bold">Last Builds</emphasis>:
          this widget is available for both personal and project dashboard.
          It is linked to only one job, and show the last builds for this job 
          (last one, last successfull, last failed). It also displays the project
          weather report (project trend, see <xref linkend="ContinuousIntegrationIntroduction" />).
           <figure id="HudsonWidgetLastBuilds">
            <title>"Lasts Builds" Widget</title>
            <mediaobject>
             <imageobject>
               <imagedata format="PNG"
                 fileref="../../screenshots/en_US/sc_hudson_widget_last_builds.png" width="14.5cm" />
             </imageobject>
            </mediaobject>
           </figure>
         </para>
        </listitem>
        <listitem>
         <para>
          <emphasis role="bold">Test Results</emphasis>:
          this widget is available for both personal and project dashboard.
          It is linked to only one job, and show the test results of the latest build 
          for the selected job. To display something, your job needs to execute
          tests and publish them. The result is shown on a pie chart.
           <figure id="HudsonWidgetTestResults">
            <title>"Test results" Widget</title>
            <mediaobject>
             <imageobject>
               <imagedata format="PNG"
                 fileref="../../screenshots/en_US/sc_hudson_widget_test_results.png" width="14.5cm" />
             </imageobject>
            </mediaobject>
           </figure>
         </para>
        </listitem>
        <listitem>
         <para>
          <emphasis role="bold">Test Trend</emphasis>:
          this widget is available for both personal and project dashboard.
          It is linked to only one job, and show the test result trend for the job.
          Of course, your job needs to have tests to display something.
          The graph will show the number of tests (failed and successfull) along 
          time. It can be very convenient for project managers to check that
          the number of tests is increasing while the number of build and commits
          are increasing too.
           <figure id="HudsonWidgetTestTrend">
            <title>"Tests Trend" Widget</title>
            <mediaobject>
             <imageobject>
               <imagedata format="PNG"
                 fileref="../../screenshots/en_US/sc_hudson_widget_test_trend.png" width="14.5cm" />
             </imageobject>
            </mediaobject>
           </figure>
         </para>
        </listitem>
        <listitem>
         <para>
          <emphasis role="bold">Build History</emphasis>:
          this widget is available for both personal and project dashboard.
          It is linked to only one job, and show the build history, under the form
          of RSS feed. For each build of the list, you can see the build number,
          the status and the date the build has been scheduled.
           <figure id="HudsonWidgetBuildHistory">
            <title>"Builds History" Widget</title>
            <mediaobject>
             <imageobject>
               <imagedata format="PNG"
                 fileref="../../screenshots/en_US/sc_hudson_widget_builds_history.png" width="14.5cm" />
             </imageobject>
            </mediaobject>
           </figure>
         </para>
        </listitem>
        <listitem>
         <para>
          <emphasis role="bold">Last Artifacts of the Build</emphasis>:
          this widget is available for both personal and project dashboard.
          It is linked to only one job, and show the last artifacts published.
          To display something, your job needs to publish artifacts.
           <figure id="HudsonWidgetLastArtifacts">
            <title>"Last artifacts of the Build" Widget</title>
            <mediaobject>
             <imageobject>
               <imagedata format="PNG"
                 fileref="../../screenshots/en_US/sc_hudson_widget_last_artifacts.png" width="14.5cm" />
             </imageobject>
            </mediaobject>
           </figure>
         </para>
        </listitem>
       </itemizedlist>
    
    </section>
    
    <section id="HudsonReferences">
      <title>Hudson References</title>
      <para>
        It is possible to make references to Hudson items in &SYS_PRODUCT_NAME;. 
        There are some predefined references (job, build), but you can also create
        your own references if needed (see <xref linkend="ReferenceOverview" /> 
        for more details about references)
      </para>
      
      <section id="HudsonJobReferences">
        <title>Make a reference to a Job</title>
        <para>
            The keyword to make a reference to a Job is: <emphasis role="bold">job</emphasis>.
            To make a reference to a job, you can use the expressions:
            <itemizedlist mark="bullet">
             <listitem>
              <para>job #JobNameToReference (the job must be in the current project)</para>
             </listitem>
             <listitem>
              <para>job #project:JobNameToReference (will make a reference to the job 'JobNameToReference' of the project 'project')</para>
             </listitem>
             <listitem>
              <para>job #project_num:JobNameToReference (will make a reference to the job 'JobNameToReference' of the project with number 'project_num')</para>
             </listitem>
            </itemizedlist>
         </para>
      </section>
      <section id="HudsonBuildReferences">
        <title>Make a reference to a build</title>
        <para>
            The keyword to make a reference to a build is: <emphasis role="bold">build</emphasis>.
            To make a reference to a build, you can use the expressions:
            <itemizedlist mark="bullet">
             <listitem>
              <para>build #XXX (there must be only one job associated with the current project, and the referenced build will be the build number 'XXX' of this job)</para>
             </listitem>
             <listitem>
              <para>build #AJob/XXX (will make a reference to build number 'XXX' of job named 'AJob' of the current project)</para>
             </listitem>
             <listitem>
              <para>build #project:AJob/XXX (will make a reference to the build number 'XXX' of the job 'AJob' of project 'project')</para>
             </listitem>
             <listitem>
              <para>build #projet_num:AJob/XXX (will make a reference to the build number 'XXX' of the job 'AJob' of the project number 'project_num')</para>
             </listitem>
            </itemizedlist>
        </para>
      </section>
      
    </section>
    
  </section>
  
  
</chapter>
