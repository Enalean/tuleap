<?php
/**
 * Copyright (c) Enalean, 2023 - Present. All Rights Reserved.
 *
 * This file is a part of Tuleap.
 *
 * Tuleap is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Tuleap is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
 */
declare(strict_types=1);
namespace Tuleap\TestManagement\Test\RealTime;

use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\MockObject\Stub;
use Tracker_Permission_PermissionsSerializer;
use Tuleap\ForgeConfigSandbox;
use Tuleap\RealTime\NodeJSClient;
use Tuleap\RealTimeMercure\MercureClient;
use Tuleap\Test\Builders\UserTestBuilder;
use Tuleap\Test\PHPUnit\TestCase;
use Tuleap\Test\Stubs\User\Avatar\ProvideUserAvatarUrlStub;
use Tuleap\TestManagement\RealTime\RealTimeMessageSender;
use Tuleap\Tracker\Artifact\Artifact;
use Tuleap\Tracker\RealTime\RealTimeArtifactMessageSender;
use Tuleap\Tracker\RealtimeMercure\RealTimeMercureArtifactMessageSender;
use Tuleap\Tracker\REST\MinimalTrackerRepresentation;
use Tuleap\Tracker\Test\Builders\ArtifactTestBuilder;

#[\PHPUnit\Framework\Attributes\DisableReturnValueGenerationForTestDoubles]
final class RealTimeMessageSenderTest extends TestCase
{
    use ForgeConfigSandbox;

    private MockObject&RealTimeMercureArtifactMessageSender $mercure_artifact_message_sender;
    private Stub&Tracker_Permission_PermissionsSerializer $permissions_serializer;
    private MockObject&RealTimeArtifactMessageSender $artifact_message_sender;
    private Stub&NodeJSClient $node_client;
    private Artifact $artifact_campaign;
    private Artifact $artifact;
    private Artifact $artifact_link;
    private RealTimeMessageSender $message_sender;
    private \PFUser $user;
    private MockObject&MinimalTrackerRepresentation $tracker_representation;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artifact                        = ArtifactTestBuilder::anArtifact(1)->build();
        $this->artifact_campaign               = ArtifactTestBuilder::anArtifact(2)->build();
        $this->artifact_message_sender         = $this->createMock(RealTimeArtifactMessageSender::class);
        $this->artifact_link                   = ArtifactTestBuilder::anArtifact(3)->build();
        $this->permissions_serializer          = $this->createStub(Tracker_Permission_PermissionsSerializer::class);
        $this->node_client                     = $this->createStub(NodeJSClient::class);
        $this->mercure_artifact_message_sender = $this->createMock(RealTimeMercureArtifactMessageSender::class);
        $this->user                            = UserTestBuilder::aUser()->build();
        $this->tracker_representation          = $this->createMock(MinimalTrackerRepresentation::class);
        $this->message_sender                  = new RealTimeMessageSender(
            $this->node_client,
            $this->permissions_serializer,
            $this->artifact_message_sender,
            $this->mercure_artifact_message_sender,
            ProvideUserAvatarUrlStub::build(),
        );
    }

    public function testExecutionCreatedtestNoFlag(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 0);
        $this->artifact_message_sender->expects($this->once())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->message_sender->sendExecutionCreated(
            $this->user,
            $this->artifact_campaign,
            $this->artifact,
            '11111'
        );
    }

    public function testExecutionCreatedNoUUID(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 0);
        $this->artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->message_sender->sendExecutionCreated(
            $this->user,
            $this->artifact_campaign,
            $this->artifact,
            null
        );
    }

    public function testExecutionCreatedMercureFlag(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 1);
        $this->artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->once())->method('sendMessage');
        $this->message_sender->sendExecutionCreated(
            $this->user,
            $this->artifact_campaign,
            $this->artifact,
            '11111'
        );
    }

    public function testExecutionDeletedNoFlag(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 0);
        $this->artifact_message_sender->expects($this->once())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->message_sender->sendExecutionDeleted(
            $this->user,
            $this->artifact_campaign,
            $this->artifact,
            '11111'
        );
    }

    public function testExecutionDeletedNoUUID(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 0);
        $this->artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->message_sender->sendExecutionDeleted(
            $this->user,
            $this->artifact_campaign,
            $this->artifact,
            null
        );
    }

    public function testExecutionDeletedMercureFlag(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 1);
        $this->artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->once())->method('sendMessage');
        $this->message_sender->sendExecutionDeleted(
            $this->user,
            $this->artifact_campaign,
            $this->artifact,
            '11111'
        );
    }

    public function testArtifactLinkAddedNoUUID(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 0);
        $this->artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->message_sender->sendArtifactLinkAdded(
            $this->user,
            $this->artifact_campaign,
            $this->artifact,
            $this->artifact_link,
            null,
            $this->tracker_representation
        );
    }

    public function testArtifactLinkAddedNoFlag(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 0);
        $this->artifact_message_sender->expects($this->once())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->message_sender->sendArtifactLinkAdded(
            $this->user,
            $this->artifact_campaign,
            $this->artifact,
            $this->artifact_link,
            '11111',
            $this->tracker_representation
        );
    }

    public function testArtifactLinkAddedMercureFlag(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 1);
        $this->artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->once())->method('sendMessage');
        $this->message_sender->sendArtifactLinkAdded(
            $this->user,
            $this->artifact_campaign,
            $this->artifact,
            $this->artifact_link,
            '11111',
            $this->tracker_representation
        );
    }

    public function testCampaignUpdatedNoFlag(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 0);
        $this->artifact_message_sender->expects($this->once())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->message_sender->sendCampaignUpdated(
            $this->user,
            $this->artifact_campaign,
            '11111'
        );
    }

    public function testCampaignUpdatedNoUUID(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 0);
        $this->artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->message_sender->sendCampaignUpdated(
            $this->user,
            $this->artifact_campaign,
            null
        );
    }

    public function testCampaignUpdatedMercureFlag(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 1);
        $this->artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->once())->method('sendMessage');
        $this->message_sender->sendCampaignUpdated(
            $this->user,
            $this->artifact_campaign,
            '11111'
        );
    }

    public function testSendExecutionUpdatedNoFlag(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 0);
        $this->artifact_message_sender->expects($this->once())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->message_sender->sendExecutionUpdated(
            $this->user,
            $this->artifact_campaign,
            $this->artifact,
            null,
            null,
            null
        );
    }

    public function testSendExecutionUpdatedMercureFlag(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 1);
        $this->artifact_message_sender->expects($this->never())->method('sendMessage');
        $this->mercure_artifact_message_sender->expects($this->once())->method('sendMessage');
        $this->message_sender->sendExecutionUpdated(
            $this->user,
            $this->artifact_campaign,
            $this->artifact,
            null,
            null,
            null
        );
    }
}
