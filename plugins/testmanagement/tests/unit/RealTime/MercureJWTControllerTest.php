<?php
/**
 * Copyright (c) Enalean, 2023 - Present. All Rights Reserved.
 *
 * This file is a part of Tuleap.
 *
 * Tuleap is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Tuleap is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
 */

namespace Tuleap\TestManagement\RealTime;

use Laminas\HttpHandlerRunner\Emitter\EmitterInterface;
use Lcobucci\JWT\Configuration;
use Lcobucci\JWT\Signer\Hmac\Sha256;
use Lcobucci\JWT\Signer\Key;
use Project;
use Psr\Log\NullLogger;
use Tuleap\ForgeConfigSandbox;
use Tuleap\Http\HTTPFactoryBuilder;
use Tuleap\Http\Server\NullServerRequest;
use Tuleap\JWT\generators\MercureJWTGeneratorImpl;
use Tuleap\RealTimeMercure\MercureClient;
use Tuleap\Test\Builders\ProjectTestBuilder;
use Tuleap\Test\Helpers\NoopSapiEmitter;
use Tuleap\Test\PHPUnit\TestCase;
use Tuleap\Test\Stubs\ProvideCurrentUserStub;
use Tuleap\Test\Stubs\User\Avatar\ProvideUserAvatarUrlStub;
use Tuleap\TestManagement\Campaign\ArtifactNotFoundException;
use Tuleap\TestManagement\Campaign\CampaignRetriever;
use Tuleap\TestManagement\ConfigConformanceValidator;
use Tuleap\Tracker\Artifact\Artifact;
use Tuleap\Tracker\Test\Builders\TrackerTestBuilder;
use Tuleap\Tracker\Tracker;

#[\PHPUnit\Framework\Attributes\DisableReturnValueGenerationForTestDoubles]
final class MercureJWTControllerTest extends TestCase
{
    use ForgeConfigSandbox;

    private \Psr\Http\Message\ResponseFactoryInterface $response_factory;
    private \Psr\Http\Message\StreamFactoryInterface $stream_factory;
    private EmitterInterface $emitter;
    private NullLogger $test_logger;
    private ProvideCurrentUserStub $user_manager;
    private ConfigConformanceValidator $conformance_validator;
    private \Tracker_URLVerification $url_verification;
    private CampaignRetriever $campaign_retriever;
    private Artifact $artifact;
    private Tracker $tracker;
    private Project $project;
    private MercureJWTController $mercure_jwt_controller;

    #[\Override]
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user_manager          = ProvideCurrentUserStub::buildCurrentUserByDefault();
        $this->response_factory      = HTTPFactoryBuilder::responseFactory();
        $this->stream_factory        = HTTPFactoryBuilder::streamFactory();
        $jwt_configuration           = Configuration::forSymmetricSigner(new Sha256(), Key\InMemory::plainText(str_repeat('a', 32)));
        $mercure_jwt_generator       = new MercureJWTGeneratorImpl($jwt_configuration, ProvideUserAvatarUrlStub::build());
        $this->emitter               = new NoopSapiEmitter();
        $this->campaign_retriever    = $this->createStub(CampaignRetriever::class);
        $this->conformance_validator = $this->createStub(ConfigConformanceValidator::class);
        $this->artifact              = $this->createStub(Artifact::class);
        $this->test_logger           = new NullLogger();
        $this->project               = ProjectTestBuilder::aProject()->build();
        $this->tracker               = TrackerTestBuilder::aTracker()->withId(1)->withProject($this->project)->build();


        $this->mercure_jwt_controller =  new MercureJWTController(
            $this->campaign_retriever,
            $this->test_logger,
            $this->response_factory,
            $this->stream_factory,
            $mercure_jwt_generator,
            $this->user_manager,
            $this->conformance_validator,
            $this->emitter
        );
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 1);
    }

    private function createCampaign(): \Tuleap\TestManagement\Campaign\Campaign
    {
        return new \Tuleap\TestManagement\Campaign\Campaign($this->artifact, 1, new \Tuleap\TestManagement\Campaign\NoJobConfiguration());
    }

    public function testNoError(): void
    {
        $request =  (new NullServerRequest())->withUri(
            HTTPFactoryBuilder::URIFactory()->createUri('/12')
        );
        $this->campaign_retriever->method('getById')->willReturn($this->createCampaign());
        $this->artifact->method('userCanView')->willReturn(true);
        $this->artifact->method('getTracker')->willReturn($this->tracker);
        $this->conformance_validator->method('isArtifactACampaign')->willReturn(true);
        $response = $this->mercure_jwt_controller->handle($request);
        $this->assertEquals(200, $response->getStatusCode());
    }

    public function testNoFeatureFlag(): void
    {
        \ForgeConfig::setFeatureFlag(MercureClient::FEATURE_FLAG_TESTMANAGEMENT_KEY, 0);
        $request =  (new NullServerRequest())->withUri(
            HTTPFactoryBuilder::URIFactory()->createUri('/12')
        );
        $this->campaign_retriever->method('getById')->willReturn($this->createCampaign());
        $this->artifact->method('userCanView')->willReturn(true);
        $this->artifact->method('getTracker')->willReturn($this->tracker);
        $this->conformance_validator->method('isArtifactACampaign')->willReturn(true);
        $response = $this->mercure_jwt_controller->handle($request);
        $this->assertEquals(404, $response->getStatusCode());
    }

    public function testNoArtifact(): void
    {
        $request =  (new NullServerRequest())->withUri(
            HTTPFactoryBuilder::URIFactory()->createUri('/12')
        );
        $this->campaign_retriever->method('getById')->willThrowException(new ArtifactNotFoundException());
        $this->artifact->method('userCanView')->willReturn(true);
        $this->artifact->method('getTracker')->willReturn($this->tracker);
        $this->conformance_validator->method('isArtifactACampaign')->willReturn(true);
        $response = $this->mercure_jwt_controller->handle($request);
        $this->assertEquals(404, $response->getStatusCode());
    }

    public function testNoCampaign(): void
    {
        $request =  (new NullServerRequest())->withUri(
            HTTPFactoryBuilder::URIFactory()->createUri('/12')
        );
        $this->campaign_retriever->method('getById')->willReturn($this->createCampaign());
        $this->conformance_validator->method('isArtifactACampaign')->willReturn(false);
        $this->artifact->method('userCanView')->willReturn(true);
        $this->artifact->method('getTracker')->willReturn($this->tracker);
        $response = $this->mercure_jwt_controller->handle($request);
        $this->assertEquals(404, $response->getStatusCode());
    }

    public function testCantView(): void
    {
        $request =  (new NullServerRequest())->withUri(
            HTTPFactoryBuilder::URIFactory()->createUri('/12')
        );
        $this->campaign_retriever->method('getById')->willReturn($this->createCampaign());
        $this->conformance_validator->method('isArtifactACampaign')->willReturn(true);
        $this->artifact->method('userCanView')->willReturn(false);
        $this->artifact->method('getTracker')->willReturn($this->tracker);
        $response = $this->mercure_jwt_controller->handle($request);
        $this->assertEquals(404, $response->getStatusCode());
    }

    public function testProjectNoToken(): void
    {
        $request                    =  (new NullServerRequest())->withUri(
            HTTPFactoryBuilder::URIFactory()->createUri('/12')
        );
        $null_mercure_jwt_generator = new \Tuleap\JWT\generators\NullMercureJWTGenerator();
        $controller                 = new MercureJWTController(
            $this->campaign_retriever,
            $this->test_logger,
            $this->response_factory,
            $this->stream_factory,
            $null_mercure_jwt_generator,
            $this->user_manager,
            $this->conformance_validator,
            $this->emitter
        );
        $this->campaign_retriever->method('getById')->willReturn($this->createCampaign());
        $this->conformance_validator->method('isArtifactACampaign')->willReturn(true);
        $this->artifact->method('userCanView')->willReturn(true);
        $this->artifact->method('getTracker')->willReturn($this->tracker);
        $response = $controller->handle($request);
        $this->assertEquals(404, $response->getStatusCode());
    }
}
