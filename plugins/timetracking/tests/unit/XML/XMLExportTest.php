<?php
/**
 * Copyright (c) Enalean, 2021 - Present. All Rights Reserved.
 *
 * This file is a part of Tuleap.
 *
 * Tuleap is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Tuleap is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace Tuleap\Timetracking\XML;

use PFUser;
use SimpleXMLElement;
use Tracker;
use Tracker_ArtifactFactory;
use Tuleap\Timetracking\Admin\TimetrackingEnabler;
use Tuleap\Timetracking\Admin\TimetrackingUgroupRetriever;
use Tuleap\Timetracking\Time\Time;
use Tuleap\Timetracking\Time\TimeRetriever;
use Tuleap\Tracker\Artifact\Artifact;
use UserManager;
use UserXMLExportedCollection;
use UserXMLExporter;
use XML_RNGValidator;
use XML_SimpleXMLCDATAFactory;

#[\PHPUnit\Framework\Attributes\DisableReturnValueGenerationForTestDoubles]
final class XMLExportTest extends \Tuleap\Test\PHPUnit\TestCase
{
    /**
     * @var UserManager&\PHPUnit\Framework\MockObject\MockObject
     */
    private $user_manager;
    /**
     * @var TimetrackingEnabler&\PHPUnit\Framework\MockObject\MockObject
     */
    private $timetracking_enabler;
    /**
     * @var \PHPUnit\Framework\MockObject\MockObject&TimetrackingUgroupRetriever
     */
    private $timetracking_ugroup_retriever;
    /**
     * @var \PHPUnit\Framework\MockObject\MockObject&Tracker_ArtifactFactory
     */
    private $artifact_factory;
    /**
     * @var \PHPUnit\Framework\MockObject\MockObject&TimeRetriever
     */
    private $time_retriever;
    private UserXMLExporter $user_xml_exporter;
    private XMLExport $export;
    /**
     * @var \PHPUnit\Framework\MockObject\MockObject&PFUser
     */
    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user_manager                  = $this->createMock(UserManager::class);
        $this->timetracking_enabler          = $this->createMock(TimetrackingEnabler::class);
        $this->timetracking_ugroup_retriever = $this->createMock(TimetrackingUgroupRetriever::class);
        $this->artifact_factory              = $this->createMock(Tracker_ArtifactFactory::class);
        $this->time_retriever                = $this->createMock(TimeRetriever::class);
        $this->user_xml_exporter             = new UserXMLExporter(
            $this->user_manager,
            new UserXMLExportedCollection(new XML_RNGValidator(), new XML_SimpleXMLCDATAFactory())
        );

        $this->export = new XMLExport(
            $this->timetracking_enabler,
            $this->timetracking_ugroup_retriever,
            $this->artifact_factory,
            $this->time_retriever,
            $this->user_xml_exporter,
            $this->user_manager
        );

        $this->user = $this->createMock(PFUser::class);
    }

    public function testItExportsTimetrackingInXML(): void
    {
        $exported_tracker = $this->createMock(Tracker::class);
        $exported_tracker->method('getId')->willReturn(789);

        $exported_trackers = [
            'T789' => $exported_tracker,
        ];

        $xml = new SimpleXMLElement(
            <<<EOS
            <?xml version="1.0" encoding="UTF-8"?>
            <project>
                <trackers>
                    <tracker id="T789">
                    </tracker>
                </trackers>
            </project>
            EOS
        );

        $this->timetracking_enabler
            ->expects(self::once())
            ->method('isTimetrackingEnabledForTracker')
            ->with($exported_tracker)
            ->willReturn(true);

        $this->timetracking_ugroup_retriever
            ->expects(self::once())
            ->method('getReaderUgroupsForTracker')
            ->with($exported_tracker)
            ->willReturn(
                [new \ProjectUGroup(['ugroup_id' => 4])]
            );

        $this->timetracking_ugroup_retriever
            ->expects(self::once())
            ->method('getWriterUgroupsForTracker')
            ->with($exported_tracker)
            ->willReturn(
                [new \ProjectUGroup(['ugroup_id' => 3])]
            );

        $artifact = $this->createMock(Artifact::class);
        $this->artifact_factory
            ->expects(self::once())
            ->method('getArtifactsByTrackerId')
            ->with(789)
            ->willReturn([$artifact]);

        $this->time_retriever
            ->expects(self::once())
            ->method('getTimesForUser')
            ->with(
                $this->user,
                $artifact
            )
            ->willReturn([
                new Time(
                    1,
                    104,
                    45,
                    '2020-02-06',
                    600,
                    'Step 01'
                ),
            ]);

        $another_user = $this->createMock(PFUser::class);
        $another_user->method('getLdapId')->willReturn(20004);
        $another_user->method('getId')->willReturn(104);

        $this->user_manager
            ->expects(self::once())
            ->method('getUserById')
            ->with(104)
            ->willReturn($another_user);

        $this->export->export(
            $xml,
            $this->user,
            $exported_trackers
        );

        self::assertTrue(isset($xml->trackers->tracker->timetracking));
        $xml_timetracking = $xml->trackers->tracker->timetracking;
        self::assertSame('1', (string) $xml_timetracking['is_enabled']);

        self::assertTrue(isset($xml_timetracking->permissions));
        self::assertTrue(isset($xml_timetracking->permissions->read));
        self::assertTrue(isset($xml_timetracking->permissions->write));

        self::assertSame('project_admins', (string) $xml_timetracking->permissions->read->ugroup);
        self::assertSame('project_members', (string) $xml_timetracking->permissions->write->ugroup);

        self::assertCount(1, $xml_timetracking->time);
        self::assertSame('45', (string) $xml_timetracking->time['artifact_id']);
        self::assertSame('600', (string) $xml_timetracking->time->minutes);
        self::assertSame('Step 01', (string) $xml_timetracking->time->step);
        self::assertSame('2020-02-06T00:00:00+01:00', (string) $xml_timetracking->time->day);
        self::assertSame('20004', (string) $xml_timetracking->time->user);
    }

    public function testItExportsNothingIfTimetrackingIsNotEnabled(): void
    {
        $exported_tracker = $this->createMock(Tracker::class);
        $exported_tracker->method('getId')->willReturn(789);

        $exported_trackers = [
            'T789' => $exported_tracker,
        ];

        $xml = new SimpleXMLElement(
            <<<EOS
            <?xml version="1.0" encoding="UTF-8"?>
            <project>
                <trackers>
                    <tracker id="T789">
                    </tracker>
                </trackers>
            </project>
            EOS
        );

        $this->timetracking_enabler
            ->expects(self::once())
            ->method('isTimetrackingEnabledForTracker')
            ->with($exported_tracker)
            ->willReturn(false);

        $this->timetracking_ugroup_retriever->expects(self::never())->method('getReaderUgroupsForTracker');
        $this->timetracking_ugroup_retriever->expects(self::never())->method('getWriterUgroupsForTracker');
        $this->artifact_factory->expects(self::never())->method('getArtifactsByTrackerId');
        $this->time_retriever->expects(self::never())->method('getTimesForUser');
        $this->user_manager->expects(self::never())->method('getUserById');

        $this->export->export(
            $xml,
            $this->user,
            $exported_trackers
        );

        self::assertFalse(isset($xml->trackers->tracker->timetracking));
    }
}
