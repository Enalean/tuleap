This document aims to give major keys of the architecture of the plugin.

This document can be found here:
* https://partners.xrce.xerox.com/wiki/index.php?pagename=DocmanImplementation&group_id=120 
* src/plugins/docman/doc/devel/README

!!! Architecture

Docman plugin is based on MVC (model/view/controler) pattern. This application
layout is common and we won't detail it here. But we enhance this pattern with
higher level approach toward Buisness Objects and Transport Objects.

Bo: Buisness Object
Dao: DataAccessObject

The main principle are:
* SQL and/or Filesystem access are made in Dao and *only* in Dao.
* Buisness Object offer an high level view of the model.
* Data are travelling in the application encapsulated in Transport Objects (also known as Containers).
* When Views and Actions are dealing with Model Layer, they only talk with
Buisness Objects.
* Controler job is to receive request from user, perform Actions and display
Views following the request.
* Views and Actions should never directly access to requests parameters.

!! Organisation of the code

* Model
  * FolderBo.class
  * ItemBo.class
  * FolderDao.class
  * ItemDao.class
  * NodeToRootVisitor.class

* Transport object
  * Folder.class
  * Item.class
  * ItemFactory.class
  * ItemNode.class

* View
  * DisplayItemTreeUlVisitor.class
  * DisplayItemTreeVisitor.class
  * DocmanViews.class
  * DocmanAdminViews.class

* Controler
  * Docman.class
  * DocmanAdmin.class

* Action
  * DocmanActions.class
  * DocmanAdminActions.class

* Plugin
  * docmanPlugin.class
  * DocmanPluginDescriptor.class
  * DocmanPluginInfo.class


!!! Metadata

Note: there is a misunderstanding between Bo objects and Factories. We should merge in only one class.

!! Introduction & main concepts

Metadata code is organized in 3 "categories" of classes:
* Metadata
* MetadataValue
* MetadataListOfValueElement

Each category behaviour is splitted in 3 parts:
* container (Green on class diagram).
* data access object (Light grey on class diagram).
* factory (Dark grey on class diagram).

HTML output of the metadata is handled by MetadataHtml objects.

!! Metadata
Metadata management is covered by Docman_Metadata* classes:

* Docman_Metadata is the container. It's used as an class abstraction of the table 'plugin_docman_metadata'. One record in this table correspond to one instance of Docman_Metadata class.
  * Docman_ListMetadata is the container of metadata that provide a list of values in addition to the default metadata info.

* Docman_MetadataDao is the access to database object. It perform all SQL queries to manipulate and fetch data in the DB. Related SQL tables:
  * plugin_docman_metadata

* Docman_MetadataFactory is an high level interface to handle Docman_Metadata. All operation related to Metadata are available in this class.

!! MetadataValue
MetadataValue* classes are used to handle values of metadata for a given item. MetadataValue (and related SQL tables) perfom the link between field definition (Metadata) and the item (Item).

* Docman_MetadataValue is the container. This is the class that represent the SQL table 'plugin_metadata_value'. Docman_MetadataValue is an abstract class, the 2 concrete classes are:
  * Docman_MetadataValueScalar when a metadata only accept one value per item.
  * Docman_MetadataValueList when we can have several values for one metadata for a given item (for instance: multiple selection box).

* Docman_MetadataValueDao handle all access to database related to metadata values management.
Related SQL tables:
  * plugin_docman_metadata_value

* Docman_MetadataValueFactory is an high level interface to manipulate metadata values.

!! MetadataListOfValueElement

MetadataListOfValueElement* classes handle access to ListOfValues metadata. ListOfValues metadata is a special type of metadata that provide a list of elements and user should pick up one (or many) in the list. 

From the database point of view:
* the ListOfValues elements are stored in 'plugin_docman_listofvalues'
* the link between 'plugin_docman_listofvalues' and  'plugin_docman_metadata' is stored in 'plugin_docman_listofvalues_metadata'.
* the link between Item and chosen element for given metadata is stored in 'valueInt' field of 'plugin_docman_metadata_value'.

* MetadataListOfValueElement is a container that represent the SQL table 'plugin_docman_listofvalues'. It represent one element of the list of choices.

* MetadataListOfValueElementDao handle access to database for 'plugin_docman_listofvalues'.

* MetadataListOfValueElementFactory is an high level interface to manipulate list of values elements.
