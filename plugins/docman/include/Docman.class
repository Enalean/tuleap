<?php
/**
 * Copyright (c) STMicroelectronics, 2006. All Rights Reserved.
 *
 * Originally written by Manuel Vacelet, 2006
 *
 * This file is a part of CodeX.
 *
 * CodeX is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * CodeX is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CodeX; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id$
 */
 
require_once('Group.class');
require_once('common/mvc/Controler.class');
require_once('common/include/HTTPRequest.class');
require_once('common/include/UserManager.class');

require_once('view/Docman_View_GetShowViewVisitor.class');
require_once('view/Docman_View_GetFieldsVisitor.class');

require_once('DocmanActions.class');
require_once('DocmanLastBrowseRequest.class');
require_once('DocmanOneFolderIsWriteable.class');

require_once('Feedback.class');

require_once('Docman_Log.class');
require_once('common/event/EventManager.class');

require_once('common/permission/PermissionsManager.class');

require_once('Docman_ReportBo.class');
require_once('Docman_MetadataFactory.class');

$GLOBALS['Language']->loadLanguageMsg('docman', 'docman');

define('PLUGIN_DOCMAN_DB_FALSE', 0);
define('PLUGIN_DOCMAN_DB_TRUE',  1);

define('PLUGIN_DOCMAN_EVENT_ADD',         1);
define('PLUGIN_DOCMAN_EVENT_EDIT',        2);
define('PLUGIN_DOCMAN_EVENT_MOVE',        3);
define('PLUGIN_DOCMAN_EVENT_DEL',         4);
define('PLUGIN_DOCMAN_EVENT_ACCESS',      5);
define('PLUGIN_DOCMAN_EVENT_NEW_VERSION', 6);
define('PLUGIN_DOCMAN_EVENT_METADATA_UPDATE', 7);

define('PLUGIN_DOCMAN_VIEW_PREF',            'plugin_docman_view');
define('PLUGIN_DOCMAN_COLLAPSE_FOLDER_PREF', 'plugin_docman_hide');
define('PLUGIN_DOCMAN_COLLAPSE_FOLDER',      2);
define('PLUGIN_DOCMAN_PREF', 'plugin_docman');

define('PLUGIN_DOCMAN_ITEM_TYPE_FOLDER',       1);
define('PLUGIN_DOCMAN_ITEM_TYPE_FILE',         2);
define('PLUGIN_DOCMAN_ITEM_TYPE_LINK',         3);
define('PLUGIN_DOCMAN_ITEM_TYPE_EMBEDDEDFILE', 4);
define('PLUGIN_DOCMAN_ITEM_TYPE_WIKI',         5);

define('PLUGIN_DOCMAN_ITEM_STATUS_NONE',     0);
define('PLUGIN_DOCMAN_ITEM_STATUS_DRAFT',    1);
define('PLUGIN_DOCMAN_ITEM_STATUS_APPROVED', 2);
define('PLUGIN_DOCMAN_ITEM_STATUS_REJECTED', 3);

define('PLUGIN_DOCMAN_ITEM_VALIDITY_PERMANENT', 0);

class Docman extends Controler {
    // variables
    var $request;
    var $user;
    var $groupId;
    var $themePath;
    var $plugin;
    var $logger;
    var $feedback;
    var $user_can_admin;
    
    function Docman(&$plugin, $pluginPath, $themePath) {
        $this->request        = & HTTPRequest::instance();
        $this->user           = null;
        $this->groupId        = null;
        $this->user_can_admin = null;
        $this->pluginPath     = $pluginPath;
        $this->themePath      = $themePath;
        $this->plugin         = $plugin;
        
        $flash = user_get_preference('plugin_docman_flash');
        if ($flash) {
            user_del_preference('plugin_docman_flash');
            $this->feedback = unserialize($flash);
        } else {
            $this->feedback =& new Feedback();
        }
        
        $this->logger  =& new Docman_Log($this);
        $event_manager =& $this->_getEventManager();
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_ADD,          $this->logger, 'log', true, 0);
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_EDIT,         $this->logger, 'log', true, 0);
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_MOVE,         $this->logger, 'log', true, 0);
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_DEL,          $this->logger, 'log', true, 0);
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_ACCESS,       $this->logger, 'log', true, 0);
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_NEW_VERSION,  $this->logger, 'log', true, 0);
        $event_manager->addListener(PLUGIN_DOCMAN_EVENT_METADATA_UPDATE,  $this->logger, 'log', true, 0);
    }
    function getLogger() {
        return $this->logger;
    }
    function logsDaily($params) {
        $this->logger->logsDaily($params);
    }
    
    function &_getEventManager() {
        return EventManager::instance();
    }
    
    function &getUser() {
        if($this->user === null) {
            $um =& UserManager::instance();
            $this->user = $um->getCurrentUser();
        }
        return $this->user;
    }
    
    /***************** PERMISSIONS ************************/
    function userCanRead($item_id) {
        $pm =& PermissionsManager::instance();
        $user =& $this->getUser();
        return $user->isSuperUser() 
            || $pm->userHasPermission($item_id, 'PLUGIN_DOCMAN_READ', $user->getUgroups((int)$this->request->get('group_id'), array())) 
            || $pm->userHasPermission($item_id, 'PLUGIN_DOCMAN_WRITE', $user->getUgroups((int)$this->request->get('group_id'), array())) 
            || $pm->userHasPermission($item_id, 'PLUGIN_DOCMAN_MANAGE', $user->getUgroups((int)$this->request->get('group_id'), array())) 
            || $this->userCanAdmin($item_id); //There are default perms for admin
    }
    function userCanWrite($item_id) {
        $pm =& PermissionsManager::instance();
        $user =& $this->getUser();
        return $user->isSuperUser() 
            || $pm->userHasPermission($item_id, 'PLUGIN_DOCMAN_WRITE', $user->getUgroups((int)$this->request->get('group_id'), array())) 
            || $pm->userHasPermission($item_id, 'PLUGIN_DOCMAN_MANAGE', $user->getUgroups((int)$this->request->get('group_id'), array())) 
            || $this->userCanAdmin($item_id); //There are default perms for admin
    }
    function userCanManage($item_id) {
        $pm =& PermissionsManager::instance();
        $user =& $this->getUser();
        return $user->isSuperUser() 
            || $pm->userHasPermission($item_id, 'PLUGIN_DOCMAN_MANAGE', $user->getUgroups((int)$this->request->get('group_id'), array())) 
            || $this->userCanAdmin($item_id); //There are default perms for admin
    }
    function userCanAdmin() {
        if ($this->user_can_admin === null) {
            //Todo: see if this code already exists in permission_xxx
            $permission_type = 'PLUGIN_DOCMAN_ADMIN';
            $object_id       = $this->request->get('group_id');
            
            $user =& $this->getUser();
            // Super-user has all rights...
            $has_permission = $user->isSuperUser();
            if (!$has_permission) {
                // permissions set for this object.
                $res = permission_db_authorized_ugroups($permission_type, (int)$object_id);
                if (db_numrows($res) < 1 && $permission_type == 'PLUGIN_DOCMAN_ADMIN') {
                    // No ugroup defined => no permissions set => get default permissions only for admin permission
                    $res=permission_db_get_defaults($permission_type);
                } 
                while (!$has_permission && ($row = db_fetch_array($res))) {
                    // should work even for anonymous users
                    $has_permission = ugroup_user_is_member($user->getId(), $row['ugroup_id'], (int)$this->request->get('group_id'));
                }
            }
            $this->user_can_admin = $has_permission;
        }
        return $this->user_can_admin;
    }
    /******************************************************/
    
    function getGroupId() {
        if($this->groupId === null) {
            $_gid = (int) $this->request->get('group_id');
            if($_gid > 0) {
                $this->groupId = $_gid;
            }
        }
        return $this->groupId;
    }

    function getDefaultUrl() {
        $_gid = $this->getGroupId();
        return $this->pluginPath.'/?group_id='.$_gid;
    }

    function getAdminUrl() {
        $_gid = $this->getGroupId();
        return $this->pluginPath.'/admin/?group_id='.$_gid;
    }
    
    function getThemePath() {
        return $this->themePath;
    }
    
    function _initFilters($view) {        
        $reportBo = new Docman_ReportBo();

        $report =& $reportBo->get($view);
        if($report !== null) {
            $reportBo->setup($report, $this->request, $this->getGroupId(), $this->feedback);
        }

        $this->_viewParams['filter'] =& $report;            
    }


    /*private*/ function _checkBrowserCompliance() {
        if($this->request->browserIsNetscape4()) {
            $this->feedback->log('warning', $GLOBALS['Language']->getText('plugin_docman', 'docman_browserns4'));
        }
    }


    function request() {
        if (!$this->request->exist('group_id')) {
            $this->feedback->log('error', 'Project is missing.');
            $this->view = 'Error';
        } else {
            // Browser alert
            $this->_checkBrowserCompliance();

            $this->_viewParams['docman']         =& $this;
            $this->_viewParams['user']           =& $this->getUser();
            $this->_viewParams['default_url']    =  $this->getDefaultUrl();
            $this->_viewParams['theme_path']     =  $this->getThemePath();
            $this->_viewParams['group_id']       = (int) $this->request->get('group_id');                
            if($this->request->exist('version_number')) {
                $this->_viewParams['version_number'] = (int) $this->request->get('version_number');
            }

            if ($this->request->exist('section')) {
                $this->_viewParams['section'] = $this->request->get('section');
            } else if ($this->request->get('action') == 'permissions') {
                $this->_viewParams['section'] = 'permissions';
            }
            $view = $this->request->exist('action') ? $this->request->get('action') : 'show';
            
            // Start is used by Table view (like LIMIT start,offset)
            if($this->request->exist('start')) {
                $this->_viewParams['start']       = (int) $this->request->get('start');
            }

            $item_factory =& $this->_getItemFactory();
            $root =& $item_factory->getRoot($this->request->get('group_id'));
            if (!$root) {
                $this->action = 'install';
                $this->_viewParams['redirect_to'] = $_SERVER['REQUEST_URI'];
                $this->view = 'Redirect';
            } else {
                $id = $this->request->get('id');
                if (!$id && $this->request->exist('item')) {
                    $i = $this->request->get('item');
                    if (isset($i['id'])) {
                        $id = $i['id'];
                    }
                }
                if ($id) {
                    $item =& $item_factory->getItemFromDb($id);
                    $mdFactory = new Docman_MetadataFactory($this, $this->_viewParams['group_id']);
                    $mdFactory->appendItemMetadataList($item);

                    if (!$item) {
                        $this->feedback->log('error', 'Unable to retrieve item. Perhaps it was removed.');
                        $this->view = 'DocmanError';
                    }
                } else {
                    $item =& $root;
                }
                if ($item) {
                    $user     = $this->getUser();
                    $can_read = $user->isSuperUser();
                    if (!$can_read) {
                        $can_read = $this->userCanRead($item->getId());
                        if ($can_read) {
                            $parent       = $item;
                            $pm           =& PermissionsManager::instance();
                            $user_ugroups =& $user->getUgroups((int)$this->request->get('group_id'), array());
                            while ($can_read && $parent->getParentId() != 0) {
                                $parent =& $item_factory->getItemFromDb($parent->getParentId());
                                $can_read = $this->userCanRead($parent->getId());
                            }
                        }
                    }
                    $folder_or_document = is_a($item, 'Docman_Folder') ? 'folder' : 'document';
                    if (!$can_read) {
                        $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_view'));
                        $this->view = 'ProjectError';
                    } else {
                        $itemBo                         = new Docman_ItemBo($this, $this->request->get('group_id'));
                        $hierarchy                      =& $itemBo->getItemTree($root->getId(), array('ignore_collapse' => true, 'user' => $this->getUser()));
                        $this->_viewParams['hierarchy'] =& $hierarchy;
                            
                        $get_show_view =& new Docman_View_GetShowViewVisitor();
                        $this->_viewParams['item'] =& $item;
                        if (strpos($view, 'admin') === 0 && !$this->userCanAdmin()) {
                            $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_admin'));
                            $this->view = $item->accept($get_show_view, $this->request->get('report'));
                        } else {
                            $last_browse_request =& new DocmanLastBrowseRequest();
                            switch ($view) {
                                case 'show':
                                    $this->view = $item->accept($get_show_view, $this->request->get('report'));
                                    $this->_initFilters($this->view);
                                    $item->accept($last_browse_request);
                                    break;
                                case 'expandFolder':
                                    $this->action = 'expandFolder';
                                    if ($this->request->get('view') == 'ulsubfolder') {
                                        $this->view = 'RawTree';
                                    } else {
                                        $this->_viewParams['item'] =& $root;
                                        $this->view = 'Tree';
                                    }
                                    break;
                                case 'collapseFolder':
                                    $this->action = 'collapseFolder';
                                    $this->_viewParams['item'] =& $root;
                                    $this->view = 'Tree';
                                    break;
                                case 'admin_set_permissions':
                                    $this->action = $view;
                                    $this->view   = 'Admin_Permissions';
                                    break;
                                case 'admin_change_view':
                                    $this->action = $view;
                                    $this->_viewParams['default_url_params'] = array(
                                        'action'  => 'admin_view',
                                        'id'      => $item->getParentId()
                                    );
                                    $this->view = 'RedirectAfterCrud';
                                    break;
                                case 'admin':
                                case 'details':
                                    $this->view = ucfirst($view);
                                    break;
                                case 'admin_view':
                                    $this->view = 'Admin_View';
                                    break;
                                case 'admin_permissions':
                                    $this->view = 'Admin_Permissions';
                                    break;
                                case 'admin_metadata':
                                    $this->view = 'Admin_Metadata';
                                    $mdFactory = new Docman_MetadataFactory($this, $this->_viewParams['group_id']);
                                    $mdIter =& $mdFactory->getMetadataForGroup();
                                    $this->_viewParams['mdIter'] =& $mdIter;
                                    break;
                                case 'admin_md_details':
                                    $this->view = 'Admin_MetadataDetails';
                                    $mdLabel = $this->request->get('md');
                                    $mdFactory = new Docman_MetadataFactory($this, $this->_viewParams['group_id']);
                                    $md =& $mdFactory->getFromLabel($mdLabel);
                                    $mdFactory->appendMetadataValueList($md, false);
                                    $this->_viewParams['md'] =& $md;
                                    break;
                                case 'admin_md_details_update':
                                    $this->action = $view;
                                    $this->_viewParams['default_url_params'] = array('action'  => 'admin_metadata');
                                    $this->view = 'RedirectAfterCrud';
                                    break;
                                case 'move':
                                    if (!$this->userCanWrite($item->getId()) || !$this->userCanWrite($item->getParentId())) {
                                       $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_move'));
                                       $this->view = 'Details';
                                    } else {
                                       $this->view = ucfirst($view);
                                    }
                                    break;
                                case 'newGlobalDocument':
                                    if ($hierarchy->accept(new DocmanOneFolderIsWriteable($this))) {
                                        $this->_viewParams['force_item'] = array();
                                        $this->view = 'NewDocument';
                                    } else {
                                        $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_create'));
                                        $this->view = $item->accept($get_show_view, $this->request->get('report'));
                                    }
                                    break;
                                case 'newDocument':
                                case 'newFolder':
                                    if (!$this->userCanWrite($item->getId())) {
                                        $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_create'));
                                        $this->view = 'Details';
                                    } else {
                                        $this->_viewParams['force_item'] = array();
                                        $this->view = ucfirst($view);
                                    }
                                    break;
                                case 'move_here':
                                    if (!$this->request->exist('item_to_move')) {
                                        $this->feedback->log('error', 'Missing parameter.');
                                        $this->view = 'DocmanError';
                                    } else {
                                        $item_to_move =& $item_factory->getItemFromDb($this->request->get('item_to_move'));
                                        $this->view = null;
                                        if ($this->request->exist('confirm')) {
                                            if (!$item_to_move || !($this->userCanWrite($item->getId()) && $this->userCanWrite($item_to_move->getId()) && $this->userCanWrite($item_to_move->getParentId()))) {
                                                $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_move'));
                                                $this->view = 'Details';
                                            } else {
                                                if ('select' === $this->request->get('ordering')) {
                                                    $this->_viewParams['selected_parent_id'] = $this->request->get('id');
                                                    $this->_viewParams['item_to_move'] =& $item_to_move;
                                                    $this->view = 'MoveSelect';
                                                } else {
                                                    $this->action = 'move';
                                                }
                                            }
                                        } 
                                        if (!$this->view) {
                                            $this->_viewParams['default_url_params'] = array(
                                                'action'  => 'details',
                                                'section' => 'actions',
                                                'id'      => $item_to_move->getId()
                                            );
                                            $this->view = 'RedirectAfterCrud';
                                        }
                                    }
                                    break;
                                case 'permissions':
                                    if (!$this->userCanManage($item->getId())) {
                                       $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_perms'));
                                       $this->view = 'Details';
                                    } else {
                                       $this->action = 'permissions';
                                       $this->view   = 'Details';
                                    }
                                    break;
                                case 'confirmDelete':
                                    if (!$this->userCanWrite($item->getId()) || !$this->userCanWrite($item->getParentId())) {
                                        $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_delete'));
                                        $this->view = 'Details';
                                    } else {
                                        $this->view   = 'Delete';
                                    }
                                    break;
                                case 'action_new_version':
                                    if (!$this->userCanWrite($item->getId())) {
                                        $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_edit'));
                                        $this->view = 'Details';
                                    } else {
                                        $this->view   = 'NewVersion';
                                    }
                                    break;
                                case 'action_update':
                                    if (!$this->userCanWrite($item->getId())) {
                                        $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_edit'));
                                        $this->view = 'Details';
                                    } else {
                                        $this->view   = 'Update';
                                    }
                                    break;
                                case 'edit':
                                    if (!$this->userCanWrite($item->getId())) {
                                        $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_edit'));
                                        $this->view = 'Details';
                                    } else {
                                        $mdFactory = new Docman_MetadataFactory($this, $this->_viewParams['group_id']);
                                        $mdFactory->appendAllListOfValuesToItem($item);
                                        $this->view   = 'Edit';
                                    }
                                    break;
                                case 'delete':
                                    if (!($this->userCanWrite($item->getId()) && $this->userCanWrite($item->getParentId()))) {
                                        $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_delete'));
                                        $this->view = 'Details';
                                    } else if ($this->request->exist('confirm')) {
                                        $this->action = $view;
                                        $this->_viewParams['default_url_params'] = array(
                                            'action'  => 'show',
                                            'id'      => $item->getParentId()
                                        );
                                        $this->view = 'RedirectAfterCrud';
                                    } else {
                                        $this->view = 'Details';
                                    }
                                    break;
                                case 'createFolder':
                                case 'createDocument':
                                    $i = $this->request->get('item');
                                    if (!$i || !isset($i['parent_id'])) {
                                        $this->feedback->log('error', 'Missing parameter.');
                                        $this->view = 'DocmanError';
                                    } else {
                                        $parent =& $item_factory->getItemFromDb($i['parent_id']);
                                        if (!$parent || !$this->userCanWrite($parent->getId())) {
                                            $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_create'));
                                            $this->view = $item->accept($get_show_view, $this->request->get('report'));
                                        } else {
                                            //Validations
                                            $new_item = $item_factory->getItemFromRow($i);
                                            $mdFactory = new Docman_MetadataFactory($this, $this->_viewParams['group_id']);
                                            $mdFactory->appendItemMetadataList($new_item);

                                            $valid = $this->_validateRequest(array_merge(
                                                $new_item->accept(new Docman_View_GetFieldsVisitor()), 
                                                $new_item->accept(new Docman_View_GetSpecificFieldsVisitor())
                                            ));
                                            //Actions
                                            if ($valid) {
                                                $this->action = $view;
                                            }
                                            //Views
                                            if ($valid) {
                                                $this->_viewParams['redirect_to'] = $last_browse_request->getUrl();
                                                $this->view = 'RedirectAfterCrud';
                                            } else {
                                                $this->_viewParams['force_item'] = $this->request->get('item');
                                                if ($view == 'createFolder') {
                                                    $this->view = 'NewFolder';
                                                } else {
                                                    $this->view = 'NewDocument';
                                                }
                                            }
                                        }
                                    }
                                    break;
                                case 'update':
                                case 'update_wl':
                                case 'new_version':
                                    if (!$this->userCanWrite($item->getId())) {
                                        $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_perms_edit'));
                                        $this->view = 'Details';
                                    } else {
                                        $valid = true;
                                        if ($this->request->exist('confirm')) {
                                            //Validations
                                            if ($view == 'update') {
                                                $mdFactory = new Docman_MetadataFactory($this, $this->_viewParams['group_id']);
                                                $mdFactory->appendItemMetadataList($item);
                                                $valid = $this->_validateRequest($item->accept(new Docman_View_GetFieldsVisitor()));
                                            } else {
                                                $valid = $this->_validateRequest($item->accept(new Docman_View_GetSpecificFieldsVisitor()));
                                            }
                                            //Actions
                                            if ($valid) {
                                                if ($view == 'update_wl') {
                                                    $this->action = 'update';
                                                } else {
                                                    $this->action = $view;
                                                }
                                            }
                                        }
                                        //Views
                                        if ($valid) {
                                            if ($view == 'update_wl' || $view == 'new_version') {
                                                $section = 'actions';
                                            } else {
                                                $section = 'properties';
                                            }
                                            $this->_viewParams['default_url_params'] = array(
                                                'action'  => 'details',
                                                'section' => $section,
                                                'id'      => $item->getId()
                                            );
                                            $this->view = 'RedirectAfterCrud';
                                        } else {
                                            $this->_viewParams['force_item'] = $this->request->get('item');
                                            if ($view == 'update_wl') {
                                                $this->view = 'Update';
                                            } else if ($view == 'new_version') {
                                                $this->view = 'NewVersion';
                                            } else {
                                                $this->view = 'Edit';
                                            }
                                        }
                                    }
                                    break;
                                case 'change_view':
                                    $this->action = $view;
                                    $this->view   = $item->accept($get_show_view, $this->request->get('report'));
                                    $this->_initFilters($this->request->get('selected_view'));
                                    break;
                                case 'install':
                                    $this->feedback->log('error', $GLOBALS['Language']->getText('plugin_docman', 'error_alreadyinstalled'));
                                    $this->view = 'DocmanError';
                                    break;
                                default:
                                    die(htmlspecialchars($view) .' is not supported');
                                    break;
                            }
                        }
                    }
                }
            }
        }
    }
    function getProperty($name) {
        $info =& $this->plugin->getPluginInfo();
        return $info->getPropertyValueForName($name);
    }
    var $item_factory;
    function &_getItemFactory() {
        if (!$this->item_factory) {
            $this->item_factory =& new Docman_ItemFactory();
        }
        return $this->item_factory;
    }
    
    function forceView($view) {
        $this->view = $view;
    }
    
    function _validateRequest($fields) {
        $valid = true;
        foreach($fields as $field) {
            $validatorList = null;
            if(is_a($field, 'Docman_MetadataHtml')) {
                $fv = $field->getValidator();
                if($fv !== null) {
                    if(!is_array($fv)) {
                        $validatorList = array($fv);
                    }
                    else {
                        $validatorList =& $fv;
                    }
                }
            }
            else {
                if (isset($field['validator'])) {
                    if (!is_array($field['validator'])) {
                        $validatorList = array($field['validator']);
                    }
                    else {
                        $validatorList = $field['validator'];
                    }
                }
            }
            
            if($validatorList !== null) {
                foreach($validatorList as $v) {
                    if (!$v->isValid()) {
                        $valid = false;
                        foreach($v->getErrors() as $error) {
                            $this->feedback->log('error', $error);
                        }
                    }
                }
            }            
        }
        return $valid;
    }
    
    function viewsManagement() {
        $className = 'Docman_View_'. $this->view;
        require_once('view/'. $className .'.class');
        if (class_exists($className)) {
            $wv = new $className($this);
            $wv->display($this->_viewParams);
        } else {
            die($className .' does not exist.');
        }
    }
}

?>