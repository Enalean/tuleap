<!--
//
// Copyright (c) Xerox Corporation, Codendi 2001-2009.
// This file is licensed under the GNU General Public License version 2. See the file COPYING. 
//
// Originally written by Nicolas Guerin 2004, Codendi Team, Xerox
//
-->
<chapter id="CodingStandards"><title>Coding Standards</title>
  <note>
   <simpara>
    The &SYS_PRODUCT_NAME; Coding Standards apply to code that is part of the official
    &SYS_PRODUCT_NAME; distribution. Those standards and this associated documentation 
    are hardly copied and adapted from <ulink 
        url="http://pear.php.net/manual/en/standards.php">
        PEAR Coding Standards</ulink>. We have introduced some variations to make the 
        &SYS_PRODUCT_NAME; team more comfortable when coding.
   </simpara>
  </note>
  <section id="standards.indenting"><title>Indenting and Line Length</title>
   
   <para>
    Use an indent of 4 spaces, with no tabs. This helps to avoid problems
    with diffs, patches, CVS history and annotations.
   </para>
   <para>
    It is recommended to keep lines at approximately 75-85 characters long
    for better code readability.
   </para>
  </section>
  
    <section id="standards.control"><title>Control Structures</title>
   
   <para>
    These include if, for, while, switch, etc. Here is an example if
    statement, since it is the most complicated of them:
    <programlisting role="php">
     <![CDATA[
if ((condition1) || (condition2)) {
    action1;
} elseif ((condition3) && (condition4)) {
    action2;
} else {
    defaultaction;
}
     ]]>
    </programlisting>
   </para>
   <simpara>You must follow the <ulink 
        url="http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS">"One 
    True Brace Style"</ulink>
   </simpara>
   <simpara>
    Control statements should have one space between the control keyword
    and opening parenthesis, to distinguish them from function calls.
   </simpara>
   <simpara>
    You are strongly encouraged to always use curly braces even in
    situations where they are technically optional. Having them
    increases readability and decreases the likelihood of logic errors
    being introduced when new lines are added.
   </simpara>
   <para>
    For switch statements:
    <programlisting role="php">
     <![CDATA[
switch (condition) {
case 1:
    action1;
    break;

case 2:
    action2;
    break;

default:
    defaultaction;
    break;
}
     ]]>
    </programlisting>
   </para>
  </section>

  <section id="standards.funcalls"><title>Function Calls</title>
   
   <para>
    Functions should be called with no spaces between the function
    name, the opening parenthesis, and the first parameter; spaces
    between commas and each parameter, and no space between the last
    parameter, the closing parenthesis, and the semicolon. Here's an
    example:
    <programlisting role="php">
     <![CDATA[
$var = foo($bar, $baz, $quux);
     ]]>
    </programlisting>
   </para>
   <para>
    As displayed above, there should be one space on either side of an
    equals sign used to assign the return value of a function to a
    variable. In the case of a block of related assignments, more space
    may be inserted to promote readability:
    <programlisting role="php">
     <![CDATA[
$short         = foo($bar);
$long_variable = foo($baz);
     ]]>
    </programlisting>
   </para>
  </section>

  <section id="standards.classdef"><title>Class Definitions</title>
   
   <para>
    Class declarations follow the <quote>One True Brace style</quote>:
    <programlisting role="php">
     <![CDATA[
class Foo_Bar {

    //... code goes here

}
     ]]>
    </programlisting>
   </para>
  </section>


  <section id="standards.funcdef"><title>Function Definitions</title>
   
   <para>
    Function declarations follow the <quote>One True Brace style</quote>:
    <programlisting role="php">
     <![CDATA[
function fooFunction($arg1, $arg2 = '') {

    if (condition) {
        statement;
    }
    return $val;
}
     ]]>
    </programlisting>
   </para>
   <para>
    Arguments with default values go at the end of the argument list.
    Always attempt to return a meaningful value from a function if one
    is appropriate. Here is a slightly longer example:
    <programlisting role="php">
     <![CDATA[
function connect($dsn, $persistent = false) {
    if (is_array($dsn)) {
        $dsninfo = $dsn;
    } else {
        $dsninfo = DB::parseDSN($dsn);
    }

    if (!$dsninfo || !$dsninfo['phptype']) {
        return $this->raiseError();
    }

    return true;
}
     ]]>
    </programlisting>
   </para>
  </section>

  <section id="standards.comments"><title>Comments</title>
   
   <para>
    Complete inline documentation comment blocks (docblocks)
    must be provided. Further information can be found on the
   <ulink url="http://www.phpdoc.org/">phpDocumentor</ulink> website.
  </para>
  <para>All source code files must contain a
   <quote>page-level</quote> docblock at the top of each file.
   This header include your copyright and a reference to the license of the script.
  Here is our copyright header as example. Feel free to change the copyright notice 
  to suit your environment.
  <programlisting role="php">
     <![CDATA[
/**
 * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved
 *
 * This file is a part of Codendi.
 *
 * Codendi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Codendi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Codendi. If not, see <http://www.gnu.org/licenses/>.
 */
     ]]>
  </programlisting>
  </para>
  <para>
   Non-documentation comments are strongly encouraged. A general rule of
   thumb is that if you look at a section of code and think
   <quote>Wow, I don't want to try and describe that</quote>,
   you need to comment it before you
   forget how it works.
  </para>
  <para>
   C style comments (/* */) and standard C++ comments (//) are both
   fine. Use of Perl/shell style comments (#) is discouraged.
  </para>
 </section>

 <section id="standards.including"><title>Including Code</title>
  
  <para>
   Anywhere you are unconditionally including a class file, use
   <command>require_once</command>. Anywhere you are conditionally
   including a class file (for example, factory methods), use
   <command>include_once</command>. Either of these will ensure
   that class files are included only once. They share the same file
   list, so you don't need to worry about mixing them - a file
   included with <command>require_once</command> will not be
   included again by <command>include_once</command>.
  </para>
 </section>

 <section id="standards.tags"><title>PHP Code Tags</title>
  
  <para>
   <emphasis>Always</emphasis> use <literal>&lt;?php ?&gt;</literal> to
   delimit PHP code, not the <literal>&lt;? ?&gt;</literal> shorthand.
  </para>
 </section>

  <section id="standards.exampleurls"><title>Example URLs</title>
   
   <para>
    Use <literal>example.com</literal>, <literal>example.org</literal>
    and <literal>example.net</literal> for all example URLs
    and email addresses, per <ulink url="http://www.ietf.org/rfc/rfc2606.txt">
                                   RFC 2606</ulink>.
   </para>
  </section>

  <section id="standards.naming"><title>Naming Conventions</title>
   
   <section><title>Classes</title>
    
    <para>
     Classes should be given descriptive names.  Avoid using abbreviations
     where possible.  Class names should always begin with an uppercase
     letter.  The class hierarchy is also reflected in the class name,
     each level of the hierarchy separated with a single underscore.
     Examples of good class names are:
     <informaltable>
      <tgroup cols="3">
       <tbody>
        <row>
         <entry><simpara>Tracker</simpara></entry>
         <entry><simpara>Widget_Rss</simpara></entry>
         <entry><simpara>HTML_Element_Textarea</simpara></entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </section>
   <section><title>Class Variables and Methods</title>
    
    <para>
     Class variables (a.k.a properties) and methods should 
     be named using the <quote>studly caps</quote> style (also referred 
     to as <quote>bumpy case</quote> or <quote>camel caps</quote>).
	 Some examples (these would be <quote>public</quote> members):
     <informaltable>
      <tgroup cols="4">
       <tbody>
        <row>
         <entry><simpara>$counter</simpara></entry>
         <entry><simpara>connect()</simpara></entry>
         <entry><simpara>getData()</simpara></entry>
         <entry><simpara>buildSomeWidget()</simpara></entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
    <para>
     Protected class members (meaning class members that are intended
     to be used only from within the same class in which they are
     declared or from subclasses that extend it) are not preceded by a single
     underscore. For example:
     <informaltable>
      <tgroup cols="2">
       <tbody>
        <row>
         <entry><simpara>protected $somevar</simpara></entry>
         <entry><simpara>protected function initTree()</simpara></entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
    </para>
   </section>
   <section><title>Constants</title>
    
    <para>
     Constants should always be all-uppercase, with underscores to
     separate words.  Prefix constant names with the uppercased name
     of the class/package they are used in.  Some examples:
     <informaltable>
      <tgroup cols="2">
       <tbody>
        <row>
         <entry><simpara>DB_DATASOURCENAME</simpara></entry>
         <entry><simpara>SERVICES_AMAZON_S3_LICENSEKEY</simpara></entry>
        </row>
       </tbody>
      </tgroup>
     </informaltable>
     <note>
      <simpara>
       The <literal>true</literal>, <literal>false</literal> and
       <literal>null</literal> constants are excepted from the all-uppercase
       rule, and must always be lowercase.
      </simpara>
     </note>
     <note>
      <simpara>
       Use of global constants are discouraged. Use class constants instead whenever appropriate. 
       For example:
       <programlisting role="php">
     <![CDATA[
class Ticket {
  const OPEN   = 1;
  const CLOSED = 2;
}

Ticket::CLOSED;
     ]]>
  </programlisting>
      </simpara>
     </note>
    </para>
   </section>
  </section>

  <section id="standards.file"><title>File Formats</title>
   
   <para>
    All scripts contributed to &SYS_PRODUCT_NAME; must:
    <itemizedlist>
     <listitem>
      <para>
       Be stored as ASCII text
      </para>
     </listitem>
     <listitem>
      <para>
       Use UTF-8 character encoding when ASCII text is not possible.
      </para>
     </listitem>
     <listitem>
      <para>
       Be Unix formatted : lines must end only with a line feed (<literal>LF</literal>).
      </para>
     </listitem>
     <listitem>
      <para>
       Strictly begins by a php opening tag (<literal><![CDATA[<?php]]></literal>).
      </para>
     </listitem>
     <listitem>
      <para>
       Strictly ends by a php closing tag (<literal><![CDATA[?>]]></literal>).
      </para>
     </listitem>
     <listitem>
      <para>
       Must have <literal>.class.php</literal> has file extension for classes.
      </para>
     </listitem>
     <listitem>
      <para>
       Should contain one class per file.
      </para>
     </listitem>
    </itemizedlist>
   </para>
  </section>

 <section id="standards.codesniffer"><title>Ensure the beauty of your code</title>
   
   <para>
    &SYS_PRODUCT_NAME; provides some tools to help developers keep their code clean
    and free of coding standards related errors.
   </para>
   <para>
    For one there is
    <ulink url="http://pear.php.net/package/PHP_CodeSniffer">PHP_CodeSniffer</ulink>
    which can be used to detect coding standard errors in your scripts.
   </para>
  </section>
 </chapter>

